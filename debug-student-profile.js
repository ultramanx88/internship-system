const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugStudentProfile(studentId) {
  try {
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${studentId}\n`);

    const student = await prisma.user.findUnique({
      where: { id: studentId },
      select: {
        id: true,
        name: true,
        email: true,
        t_name: true,
        e_name: true,
        t_surname: true,
        e_surname: true,
        t_title: true,
        e_title: true,
        phone: true,
        profileImage: true,
        majorId: true,
        departmentId: true,
        facultyId: true,
        curriculumId: true
      }
    });

    if (!student) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤');
      return;
    }

    console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    console.log(`   ID: ${student.id}`);
    console.log(`   Name: ${student.name || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   Email: ${student.email || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   TName: ${student.t_name || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   TSurname: ${student.t_surname || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   TTitle: ${student.t_title || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   Phone: ${student.phone || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   MajorId: ${student.majorId || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   DepartmentId: ${student.departmentId || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   FacultyId: ${student.facultyId || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   CurriculumId: ${student.curriculumId || '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredFields = [
      { name: 'name', value: student.name },
      { name: 'email', value: student.email },
      { name: 't_name', value: student.t_name },
      { name: 't_surname', value: student.t_surname },
      { name: 't_title', value: student.t_title },
      { name: 'phone', value: student.phone },
      { name: 'majorId', value: student.majorId },
      { name: 'departmentId', value: student.departmentId },
      { name: 'facultyId', value: student.facultyId },
      { name: 'curriculumId', value: student.curriculumId }
    ];

    const filledFields = requiredFields.filter(field => 
      field.value && field.value.toString().trim() !== ''
    );

    const completionRate = filledFields.length / requiredFields.length;
    const isComplete = completionRate >= 0.8;

    console.log('üìà ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log(`   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: ${filledFields.length}/${requiredFields.length}`);
    console.log(`   ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ${(completionRate * 100).toFixed(1)}%`);
    console.log(`   ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‚â•80%): ${isComplete ? '‚úÖ ‡πÉ‡∏ä‡πà' : '‚ùå ‡πÑ‡∏°‡πà'}\n`);

    console.log('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:');
    const missingFields = requiredFields.filter(field => 
      !field.value || field.value.toString().trim() === ''
    );
    
    if (missingFields.length === 0) {
      console.log('   ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ');
    } else {
      missingFields.forEach(field => {
        console.log(`   - ${field.name}`);
      });
    }

    console.log('\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    if (!isComplete) {
      console.log('   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Settings ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤');
      console.log('   2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      console.log('   3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      console.log('   4. ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Application Form');
    } else {
      console.log('   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ');
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// ‡πÉ‡∏ä‡πâ student ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
const studentId = process.argv[2] || 'u6800001';
debugStudentProfile(studentId);
