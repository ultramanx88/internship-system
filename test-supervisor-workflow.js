const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

// Test data
const testData = {
  applicationId: 'app_123', // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Application ‡∏ó‡∏µ‡πà‡∏°‡∏µ supervisorAssigned = true
  supervisorId: 'supervisor_1'
};

async function testSupervisorWorkflow() {
  console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Supervisor Workflow...\n');

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
    console.log('1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢...');
    const pendingAssignmentsResponse = await fetch(`${BASE_URL}/api/supervisor/workflow?action=pending_assignments`, {
      headers: {
        'x-user-id': testData.supervisorId
      }
    });

    const pendingAssignmentsResult = await pendingAssignmentsResponse.json();
    console.log('‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢:', pendingAssignmentsResult.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    console.log('üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:', pendingAssignmentsResult.applications?.length || 0);
    console.log('');

    if (pendingAssignmentsResult.applications && pendingAssignmentsResult.applications.length > 0) {
      testData.applicationId = pendingAssignmentsResult.applications[0].id;
      console.log('üìÑ ‡πÉ‡∏ä‡πâ Application ID:', testData.applicationId);
    }

    // 2. ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
    console.log('2Ô∏è‚É£ ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢...');
    const receiveResponse = await fetch(`${BASE_URL}/api/supervisor/workflow/actions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-user-id': testData.supervisorId
      },
      body: JSON.stringify({
        applicationId: testData.applicationId,
        action: 'receive_assignment',
        notes: '‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
      })
    });

    const receiveResult = await receiveResponse.json();
    console.log('‚úÖ ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢:', receiveResult.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    console.log('üìù Message:', receiveResult.message);
    console.log('');

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Supervisor Workflow
    console.log('3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Supervisor Workflow...');
    const statusResponse = await fetch(`${BASE_URL}/api/supervisor/workflow?action=status&applicationId=${testData.applicationId}`, {
      headers: {
        'x-user-id': testData.supervisorId
      }
    });

    const statusResult = await statusResponse.json();
    console.log('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', statusResult.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    if (statusResult.success) {
      console.log('üìà Current Step:', statusResult.workflowStatus.currentStep);
      console.log('üìä Supervisor Received:', statusResult.workflowStatus.supervisorReceived);
      console.log('üìä Supervisor Confirmed:', statusResult.workflowStatus.supervisorConfirmed);
      console.log('üìä Appointment Scheduled:', statusResult.workflowStatus.appointmentScheduled);
    }
    console.log('');

    // 4. ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    console.log('4Ô∏è‚É£ ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô...');
    const confirmResponse = await fetch(`${BASE_URL}/api/supervisor/workflow/actions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-user-id': testData.supervisorId
      },
      body: JSON.stringify({
        applicationId: testData.applicationId,
        action: 'confirm_assignment',
        notes: '‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
      })
    });

    const confirmResult = await confirmResponse.json();
    console.log('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:', confirmResult.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    console.log('üìù Message:', confirmResult.message);
    console.log('');

    // 5. ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏¥‡πÄ‡∏ó‡∏®
    console.log('5Ô∏è‚É£ ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏¥‡πÄ‡∏ó‡∏®...');
    const appointmentDate = new Date();
    appointmentDate.setDate(appointmentDate.getDate() + 7); // ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 7 ‡∏ß‡∏±‡∏ô
    
    const scheduleResponse = await fetch(`${BASE_URL}/api/supervisor/workflow/actions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-user-id': testData.supervisorId
      },
      body: JSON.stringify({
        applicationId: testData.applicationId,
        action: 'schedule_appointment',
        appointmentDate: appointmentDate.toISOString(),
        appointmentLocation: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
        notes: '‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
      })
    });

    const scheduleResult = await scheduleResponse.json();
    console.log('‚úÖ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏¥‡πÄ‡∏ó‡∏®:', scheduleResult.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    console.log('üìù Message:', scheduleResult.message);
    console.log('');

    // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    console.log('6Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢...');
    const finalStatusResponse = await fetch(`${BASE_URL}/api/supervisor/workflow?action=status&applicationId=${testData.applicationId}`, {
      headers: {
        'x-user-id': testData.supervisorId
      }
    });

    const finalStatusResult = await finalStatusResponse.json();
    console.log('‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:', finalStatusResult.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    if (finalStatusResult.success) {
      console.log('üìà Current Step:', finalStatusResult.workflowStatus.currentStep);
      console.log('üìä Supervisor Received:', finalStatusResult.workflowStatus.supervisorReceived);
      console.log('üìä Supervisor Confirmed:', finalStatusResult.workflowStatus.supervisorConfirmed);
      console.log('üìä Appointment Scheduled:', finalStatusResult.workflowStatus.appointmentScheduled);
      console.log('üìä Is Completed:', finalStatusResult.workflowStatus.isCompleted);
    }

    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Supervisor Workflow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testSupervisorWorkflow();
