import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { applicationIds, userId } = body;

    if (!applicationIds || !Array.isArray(applicationIds) || applicationIds.length === 0) {
      return NextResponse.json(
        { error: 'Application IDs are required' },
        { status: 400 }
      );
    }

    if (!userId) {
      return NextResponse.json(
        { error: 'User ID is required' },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô educator ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { roles: true }
    });

    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }

    let userRoles = user.roles;
    if (typeof userRoles === 'string') {
      try {
        userRoles = JSON.parse(userRoles);
      } catch (e) {
        userRoles = [userRoles];
      }
    }

    const isEducator = userRoles.includes('courseInstructor') ||
                       userRoles.includes('committee') ||
                       userRoles.includes('‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏¥‡∏ä‡∏≤') ||
                       userRoles.includes('‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏Å‡πå') ||
                       userRoles.includes('‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£');

    if (!isEducator) {
      return NextResponse.json(
        { error: 'User is not an educator' },
        { status: 403 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ applications ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏Å‡πå)
    const applications = await prisma.application.findMany({
      where: { 
        id: { in: applicationIds },
        status: 'approved' // ‡πÉ‡∏ä‡πâ approved ‡πÅ‡∏ó‡∏ô pending
      },
      select: { 
        id: true, 
        status: true,
        courseInstructorId: true
      }
    });

    if (applications.length === 0) {
      return NextResponse.json(
        { error: 'No approved applications found for supervisor assignment' },
        { status: 404 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    if (userRoles.includes('courseInstructor') || userRoles.includes('‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏¥‡∏ä‡∏≤')) {
      const unauthorizedApps = applications.filter(app => app.courseInstructorId !== userId);
      if (unauthorizedApps.length > 0) {
        return NextResponse.json(
          { error: 'Access denied to some applications' },
          { status: 403 }
        );
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ applications ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const foundApplications = applications.length;
    
    // ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏Å‡πå (‡πÉ‡∏ä‡πâ supervisor_test_001 ‡πÄ‡∏õ‡πá‡∏ô default)
    const supervisorId = 'supervisor_test_001';
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï applications (‡πÑ‡∏°‡πà‡∏°‡∏µ supervisorId field ‡πÅ‡∏•‡πâ‡∏ß)
    console.log('üîç Updating applications:', { applicationIds });
    
    const updatedApplications = await prisma.application.updateMany({
      where: { 
        id: { in: applicationIds },
        status: 'approved'
      },
      data: {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ supervisorId field ‡πÅ‡∏•‡πâ‡∏ß
      }
    });
    
    console.log('‚úÖ Update result:', updatedApplications);

    return NextResponse.json({
      success: true,
      message: `Ready for supervisor assignment: ${foundApplications} applications`,
      count: foundApplications
    });

  } catch (error) {
    console.error('Error bulk approving applications:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
