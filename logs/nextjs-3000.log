
> nextn@0.1.0 dev:3000
> next dev -p 3000

   ▲ Next.js 15.3.3
   - Local:        http://localhost:3000
   - Network:      http://192.168.0.3:3000
   - Environments: .env.local, .env

 ✓ Starting...
 ✓ Ready in 3.9s
 ○ Compiling /staff/academic ...
 ✓ Compiled /staff/academic in 12.6s (1285 modules)
 GET /staff/academic 200 in 13884ms
 ○ Compiling /staff/settings ...
 ✓ Compiled /staff/settings in 6.8s (2992 modules)
 GET /staff/settings 200 in 7556ms
 ○ Compiling /admin/users ...
 ✓ Compiled /admin/users in 7s (3098 modules)
 GET /admin/users 200 in 7637ms
 ○ Compiling /admin/companies ...
 ✓ Compiled /admin/companies in 1087ms (3122 modules)
 GET /admin/companies 200 in 1715ms
 ○ Compiling / ...
 ✓ Compiled / in 1270ms (3129 modules)
 GET / 200 in 1890ms
 ○ Compiling /login ...
 ✓ Compiled /login in 973ms (1749 modules)
 ✓ Compiled in 3.1s (1706 modules)
🔌 Setting up Socket.io server...
🔌 Initializing Socket.io server...
 GET /api/socket?EIO=4&transport=polling&t=1m36k3lp 200 in 4827ms
 GET /login 200 in 5411ms
 GET /login 200 in 1361ms
👤 Client connected: EswyXurDQYrtn5szAAAB
 ○ Compiling /api/auth/verify ...
 ✓ Compiled /api/auth/verify in 2.3s (3490 modules)
🔍 Auth verify API called
📝 Request body: { identifier: 's6800001@smart-solutions.com', password: '***' }
 POST /api/auth/verify 200 in 2680ms
 ○ Compiling /api/auth/login ...
 ✓ Compiled /api/auth/login in 770ms (3492 modules)
 Login API called
 Request body: {
  identifier: 's6800001@smart-solutions.com',
  role: 'staff',
  password: '***'
}
 POST /api/auth/login 200 in 1586ms
👋 Client disconnected: EswyXurDQYrtn5szAAAB
👤 Client connected: TquEq-QcMVk8ybQ_AAAD
👤 User user_s6800001 joined their room
👋 Client disconnected: TquEq-QcMVk8ybQ_AAAD
 ○ Compiling /staff ...
👤 Client connected: 8aS5Gs_65AJepcn0AAAF
👤 User user_s6800001 joined their room
 ✓ Compiled /staff in 2.5s (4517 modules)
 GET /staff 200 in 2853ms
 ⚠ The "images.domains" configuration is deprecated. Please use "images.remotePatterns" configuration instead.
 ○ Compiling /api/user/profile ...
 ✓ Compiled /api/user/profile in 1017ms (4519 modules)
 GET /api/user/profile 200 in 1131ms
 GET /api/user/profile 200 in 27ms
 GET /staff/settings 200 in 789ms
 GET /api/user/profile 200 in 162ms
 GET /api/user/profile 200 in 393ms
 ○ Compiling /api/course-instructors ...
👋 Client disconnected: 8aS5Gs_65AJepcn0AAAF
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/server-development/1.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/server-development/1.pack.gz'
 ✓ Compiled /api/faculties in 20.2s (4477 modules)
[2025-10-08T13:48:25.235Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T13:48:25.237Z] INFO: Users API GET query params {
  "search": "",
  "role": "instructor",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
Error fetching course instructors: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-instructors/route.ts:8:60)
   6 | export async function GET() {
   7 |   try {
>  8 |     const courseInstructors = await prisma.courseInstructor.findMany({
     |                                                            ^
   9 |       include: {
  10 |         instructor: true,
  11 |         role: true,
 GET /api/course-instructors 500 in 20931ms
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 8747ms
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 8783ms
prisma:info Starting a postgresql pool with 5 connections.
Error fetching educator roles: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/educator-roles/route.ts:8:52)
   6 | export async function GET() {
   7 |   try {
>  8 |     const educatorRoles = await prisma.educatorRole.findMany({
     |                                                    ^
   9 |       orderBy: { name: 'asc' }
  10 |     });
  11 |
 GET /api/educator-roles 500 in 21077ms
[2025-10-08T13:48:25.573Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T13:48:25.574Z] INFO: Users API GET filtering by role {
  "role": "instructor"
}
[2025-10-08T13:48:25.574Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"instructor\""
    }
  }
}
 GET /api/faculties 200 in 8336ms
[2025-10-08T13:48:25.950Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
[2025-10-08T13:48:25.967Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 10
}
[2025-10-08T13:48:25.967Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 10
}
 GET /api/users?role=instructor 200 in 21527ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
 ○ Compiling /api/majors ...
 ✓ Compiled /api/majors in 2.7s (4483 modules)
[2025-10-08T13:48:29.097Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T13:48:29.098Z] INFO: Users API GET query params {
  "search": "",
  "role": "instructor",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T13:48:29.098Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T13:48:29.098Z] INFO: Users API GET filtering by role {
  "role": "instructor"
}
[2025-10-08T13:48:29.098Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"instructor\""
    }
  }
}
Error fetching course instructors: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-instructors/route.ts:8:60)
   6 | export async function GET() {
   7 |   try {
>  8 |     const courseInstructors = await prisma.courseInstructor.findMany({
     |                                                            ^
   9 |       include: {
  10 |         instructor: true,
  11 |         role: true,
 GET /api/course-instructors 500 in 3028ms
Error fetching educator roles: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/educator-roles/route.ts:8:52)
   6 | export async function GET() {
   7 |   try {
>  8 |     const educatorRoles = await prisma.educatorRole.findMany({
     |                                                    ^
   9 |       orderBy: { name: 'asc' }
  10 |     });
  11 |
 GET /api/educator-roles 500 in 3408ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
[2025-10-08T13:48:29.360Z] INFO: Users API GET count complete {
  "total": 0
}
 GET /api/departments 200 in 3790ms
 GET /api/curriculums 200 in 3796ms
 GET /api/majors 200 in 3906ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
[2025-10-08T13:48:29.492Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 10
}
[2025-10-08T13:48:29.492Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 10
}
 GET /api/users?role=instructor 200 in 3461ms
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 353ms
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 411ms
 GET /api/faculties 200 in 416ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/curriculums 200 in 249ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/departments 200 in 388ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
 GET /api/majors 200 in 265ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
👤 Client connected: _QxKritygn8IhPEmAAAH
👤 User user_s6800001 joined their room
👋 Client disconnected: _QxKritygn8IhPEmAAAH
👤 Client connected: 4Yx2Ay5XxEajfmfSAAAJ
👤 User user_s6800001 joined their room
Error fetching educator roles: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/educator-roles/route.ts:8:52)
   6 | export async function GET() {
   7 |   try {
>  8 |     const educatorRoles = await prisma.educatorRole.findMany({
     |                                                    ^
   9 |       orderBy: { name: 'asc' }
  10 |     });
  11 |
 GET /api/educator-roles 500 in 92ms
Error fetching course instructors: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-instructors/route.ts:8:60)
   6 | export async function GET() {
   7 |   try {
>  8 |     const courseInstructors = await prisma.courseInstructor.findMany({
     |                                                            ^
   9 |       include: {
  10 |         instructor: true,
  11 |         role: true,
 GET /api/course-instructors 500 in 151ms
[2025-10-08T13:48:41.060Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T13:48:41.060Z] INFO: Users API GET query params {
  "search": "",
  "role": "instructor",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T13:48:41.061Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T13:48:41.061Z] INFO: Users API GET filtering by role {
  "role": "instructor"
}
[2025-10-08T13:48:41.061Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"instructor\""
    }
  }
}
prisma:query SELECT 1
[2025-10-08T13:48:41.080Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
[2025-10-08T13:48:41.090Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 10
}
[2025-10-08T13:48:41.090Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 10
}
 GET /api/users?role=instructor 200 in 186ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
Error fetching educator roles: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/educator-roles/route.ts:8:52)
   6 | export async function GET() {
   7 |   try {
>  8 |     const educatorRoles = await prisma.educatorRole.findMany({
     |                                                    ^
   9 |       orderBy: { name: 'asc' }
  10 |     });
  11 |
 GET /api/educator-roles 500 in 193ms
Error fetching course instructors: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-instructors/route.ts:8:60)
   6 | export async function GET() {
   7 |   try {
>  8 |     const courseInstructors = await prisma.courseInstructor.findMany({
     |                                                            ^
   9 |       include: {
  10 |         instructor: true,
  11 |         role: true,
 GET /api/course-instructors 500 in 247ms
[2025-10-08T13:48:41.426Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T13:48:41.426Z] INFO: Users API GET query params {
  "search": "",
  "role": "instructor",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T13:48:41.426Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T13:48:41.426Z] INFO: Users API GET filtering by role {
  "role": "instructor"
}
[2025-10-08T13:48:41.426Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"instructor\""
    }
  }
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
[2025-10-08T13:48:41.431Z] INFO: Users API GET count complete {
  "total": 0
}
[2025-10-08T13:48:41.435Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 10
}
[2025-10-08T13:48:41.435Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 10
}
 GET /api/users?role=instructor 200 in 209ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
 GET /staff/settings 200 in 1203ms
 ○ Compiling /favicon.ico ...
👤 Client connected: F-_70NvgiA5IAfY_AAAM
 ✓ Compiled /api/user/profile in 3.7s (2241 modules)
 ✓ Compiled in 1ms (2243 modules)
 ✓ Compiled in 3ms (2243 modules)
👋 Client disconnected: 4Yx2Ay5XxEajfmfSAAAJ
 ✓ Compiled in 0ms (2243 modules)
[2025-10-08T13:49:24.992Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T13:49:24.992Z] INFO: Users API GET query params {
  "search": "",
  "role": "instructor",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
Error fetching educator roles: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/educator-roles/route.ts:8:52)
   6 | export async function GET() {
   7 |   try {
>  8 |     const educatorRoles = await prisma.educatorRole.findMany({
     |                                                    ^
   9 |       orderBy: { name: 'asc' }
  10 |     });
  11 |
[2025-10-08T13:49:25.048Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T13:49:25.048Z] INFO: Users API GET filtering by role {
  "role": "instructor"
}
[2025-10-08T13:49:25.048Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"instructor\""
    }
  }
}
 GET /favicon.ico 200 in 8097ms
 GET /api/educator-roles 500 in 4647ms
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
[2025-10-08T13:49:25.096Z] INFO: Users API GET count complete {
  "total": 0
}
👤 User user_s6800001 joined their room
[2025-10-08T13:49:25.113Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 10
}
[2025-10-08T13:49:25.113Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 10
}
 GET /api/users?role=instructor 200 in 4677ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
 ✓ Compiled /staff/educator-roles in 1ms (2243 modules)
Error fetching course instructors: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-instructors/route.ts:8:60)
   6 | export async function GET() {
   7 |   try {
>  8 |     const courseInstructors = await prisma.courseInstructor.findMany({
     |                                                            ^
   9 |       include: {
  10 |         instructor: true,
  11 |         role: true,
 GET /api/course-instructors 500 in 6524ms
 GET /api/user/profile 200 in 9406ms
 ✓ Compiled in 9.7s (4479 modules)
[2025-10-08T13:49:37.673Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T13:49:37.674Z] INFO: Users API GET query params {
  "search": "",
  "role": "instructor",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T13:49:37.674Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T13:49:37.674Z] INFO: Users API GET filtering by role {
  "role": "instructor"
}
[2025-10-08T13:49:37.674Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"instructor\""
    }
  }
}
 GET /favicon.ico 200 in 12570ms
Error fetching educator roles: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/educator-roles/route.ts:8:52)
   6 | export async function GET() {
   7 |   try {
>  8 |     const educatorRoles = await prisma.educatorRole.findMany({
     |                                                    ^
   9 |       orderBy: { name: 'asc' }
  10 |     });
  11 |
 GET /api/educator-roles 500 in 12606ms
Error fetching course instructors: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-instructors/route.ts:8:60)
   6 | export async function GET() {
   7 |   try {
>  8 |     const courseInstructors = await prisma.courseInstructor.findMany({
     |                                                            ^
   9 |       include: {
  10 |         instructor: true,
  11 |         role: true,
 GET /api/course-instructors 500 in 10539ms
[2025-10-08T13:49:37.862Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
[2025-10-08T13:49:39.330Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 10
}
[2025-10-08T13:49:39.331Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 10
}
 GET /api/users?role=instructor 200 in 12230ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
 GET /staff/educator-roles 200 in 16000ms
 GET /api/user/profile 200 in 1972ms
 GET /api/user/profile 200 in 1181ms
 GET /api/user/profile 200 in 1168ms
 ○ Compiling /api/educator-role-assignments ...
 ✓ Compiled /api/educator-role-assignments in 5.7s (4475 modules)
Fetching academic years with whereClause: {}
 GET /api/students?role=educators&limit=1000 401 in 6018ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 6134ms
 GET /api/semesters 200 in 6138ms
Found academic years: 3
 GET /api/academic-years 200 in 6305ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/students?role=educators&limit=1000 401 in 255ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
Fetching academic years with whereClause: {}
 GET /api/semesters 200 in 373ms
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 574ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT 1
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 494ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Fetching academic years with whereClause: {}
 GET /api/students?role=educators&limit=1000 401 in 151ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 149ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 196ms
 GET /api/user/profile 200 in 204ms
 GET /api/students?role=educators&limit=1000 401 in 42ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 46ms
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 498ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
 GET /api/user/profile 200 in 456ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 491ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 360ms
 GET /api/user/profile 200 in 143ms
 GET /api/students?role=educators&limit=1000 401 in 170ms
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 202ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 732ms
 GET /api/user/profile 200 in 734ms
 GET /api/semesters 200 in 741ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/students?role=educators&limit=1000 401 in 770ms
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 783ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 GET /api/semesters 200 in 121ms
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 382ms
👋 Client disconnected: F-_70NvgiA5IAfY_AAAM
👤 Client connected: Pc1E521vKZu1P-_dAAAO
👤 User user_s6800001 joined their room
👋 Client disconnected: Pc1E521vKZu1P-_dAAAO
👤 Client connected: Za8fmdWCgqCARuHhAAAQ
👤 User user_s6800001 joined their room
👋 Client disconnected: Za8fmdWCgqCARuHhAAAQ
👤 Client connected: hiy0eeMr9RtqHAnmAAAS
👤 User user_s6800001 joined their room
 ✓ Compiled in 11.9s (4433 modules)
 GET /staff/educator-roles 200 in 1323ms
 ✓ Compiled in 3.5s (4433 modules)
 GET /staff/educator-roles 200 in 484ms
 GET /staff/educator-roles 200 in 421ms
 ○ Compiling /api/educator-role-assignments ...
 ✓ Compiled /api/educator-role-assignments in 1231ms (2213 modules)
 ✓ Compiled (2237 modules)
Fetching academic years with whereClause: {}
 GET /api/students?role=educators&limit=1000 401 in 2207ms
 GET /favicon.ico 200 in 2523ms
prisma:query SELECT 1
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 GET /api/semesters 200 in 2237ms
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 2386ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/user/profile 200 in 2399ms
Found academic years: 3
 GET /api/academic-years 200 in 2401ms
 GET /favicon.ico 200 in 147ms
👋 Client disconnected: hiy0eeMr9RtqHAnmAAAS
👤 Client connected: 0e72UDPl7PkOaLalAAAV
Fetching academic years with whereClause: {}
 GET /api/students?role=educators&limit=1000 401 in 261ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
 GET /api/user/profile 200 in 266ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
 GET /api/semesters 200 in 282ms
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 408ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 441ms
 GET /staff/educator-roles 200 in 499ms
 GET /favicon.ico 200 in 47ms
 GET /api/user/profile 200 in 142ms
 GET /api/students?role=educators&limit=1000 401 in 133ms
prisma:query SELECT 1
prisma:query SELECT 1
Fetching academic years with whereClause: {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT 1
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
 GET /api/semesters 200 in 177ms
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 304ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
👤 Client connected: m5B4v-RerBXHzFM9AAAY
Found academic years: 3
 GET /api/academic-years 200 in 314ms
 GET /favicon.ico 200 in 261ms
 GET /api/user/profile 200 in 211ms
👤 User user_s6800001 joined their room
 GET /api/students?role=educators&limit=1000 401 in 232ms
Fetching academic years with whereClause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 264ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 248ms
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments?page=1&limit=10 500 in 404ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
👋 Client disconnected: 0e72UDPl7PkOaLalAAAV
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 86ms
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 40ms
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 ⨯ ReferenceError: cleanup is not defined
    at GET (src/app/api/educator-role-assignments/route.ts:113:4)
  111 |     );
  112 |   } finally {
> 113 |     await cleanup();
      |    ^
  114 |   }
  115 | }
  116 |
 GET /api/educator-role-assignments 500 in 200ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 ✓ Compiled in 6.2s (4473 modules)
 GET /staff/educator-roles 200 in 348ms
 GET /favicon.ico 200 in 304ms
 ✓ Compiled in 2.5s (4468 modules)
 GET /staff/educator-roles 200 in 576ms
 GET /favicon.ico 200 in 77ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 GET /api/educator-role-assignments?page=1&limit=10 200 in 83ms
 ✓ Compiled in 2.4s (4464 modules)
 GET /staff/educator-roles 200 in 246ms
👋 Client disconnected: m5B4v-RerBXHzFM9AAAY
 GET /staff/educator-roles 200 in 501ms
 GET /favicon.ico 200 in 67ms
 ○ Compiling /api/semesters ...
 ✓ Compiled /api/semesters in 588ms (2230 modules)
 ✓ Compiled (2237 modules)
 GET /api/students?role=educators&limit=1000 401 in 1661ms
Fetching academic years with whereClause: {}
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
 GET /favicon.ico 200 in 1853ms
 GET /api/educator-role-assignments?page=1&limit=10 200 in 1923ms
 GET /api/semesters 200 in 1930ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
👤 Client connected: dHdhQZKZBkT-_uzmAAAb
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 1960ms
 GET /api/user/profile 200 in 1964ms
 GET /api/students?role=educators&limit=1000 401 in 172ms
👤 User user_s6800001 joined their room
Fetching academic years with whereClause: {}
 GET /api/user/profile 200 in 240ms
 GET /api/educator-role-assignments?page=1&limit=10 200 in 299ms
 GET /api/semesters 200 in 315ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 323ms
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/25.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/25.pack.gz'
 GET /api/students?role=educators&limit=1000 401 in 41ms
 ✓ Compiled in 4.1s (4453 modules)
 GET /staff/educator-roles 200 in 692ms
 ○ Compiling /api/educator-role-assignments ...
 ✓ Compiled /favicon.ico in 996ms (2229 modules)
 ✓ Compiled (2235 modules)
 GET /api/students?role=educators&limit=1000 404 in 2155ms
Fetching academic years with whereClause: {}
prisma:query SELECT 1
prisma:query SELECT 1
 GET /favicon.ico 200 in 1478ms
 GET /api/semesters 200 in 2404ms
prisma:query SELECT 1
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/educator-role-assignments?page=1&limit=10 200 in 2385ms
Found academic years: 3
 GET /api/academic-years 200 in 2455ms
 ✓ Compiled in 1890ms (4471 modules)
 GET /staff/educator-roles 200 in 213ms
 GET /favicon.ico 200 in 38ms
👋 Client disconnected: dHdhQZKZBkT-_uzmAAAb
 GET /staff/educator-roles 200 in 526ms
 GET /favicon.ico 200 in 18ms
 ○ Compiling /api/educator-role-assignments ...
 ✓ Compiled /api/educator-role-assignments in 1065ms (2216 modules)
 ✓ Compiled (2237 modules)
Fetching academic years with whereClause: {}
 GET /favicon.ico 200 in 1551ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
👤 Client connected: rEjh_GCpLA7pQPxeAAAe
 GET /api/user/profile 200 in 1726ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
 GET /api/students?role=educators&limit=1000 404 in 1736ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
 GET /api/educator-role-assignments?page=1&limit=10 200 in 1798ms
 GET /api/semesters 200 in 1846ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 1924ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/user/profile 200 in 286ms
 GET /api/students?role=educators&limit=1000 404 in 327ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
Fetching academic years with whereClause: {}
 GET /api/semesters 200 in 169ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 173ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
 GET /api/educator-role-assignments?page=1&limit=10 200 in 196ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz'
👋 Client disconnected: rEjh_GCpLA7pQPxeAAAe
👤 Client connected: A16I7_L2EyCC2M0fAAAg
👤 User user_s6800001 joined their room
👋 Client disconnected: A16I7_L2EyCC2M0fAAAg
👤 Client connected: hVWN0WqbEriuJoG5AAAi
👤 User user_s6800001 joined their room
 ○ Compiling /api/users ...
 ✓ Compiled /api/users in 7s (4473 modules)
 ✓ Compiled in 1ms (2249 modules)
 ✓ Compiled in 1ms (2249 modules)
 ✓ Compiled in 0ms (2249 modules)
Fetching academic years with whereClause: {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 GET /api/educator-role-assignments?page=1&limit=10 200 in 7684ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 7696ms
Found academic years: 3
 GET /api/academic-years 200 in 7736ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T13:59:45.773Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T13:59:45.773Z] INFO: Users API GET query params {
  "search": "",
  "role": "educators",
  "sort": "desc",
  "page": 1,
  "limit": 1000
}
[2025-10-08T13:59:45.774Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T13:59:45.774Z] INFO: Users API GET filtering by role {
  "role": "educators"
}
[2025-10-08T13:59:45.774Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"educators\""
    }
  }
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
[2025-10-08T13:59:45.835Z] INFO: Users API GET count complete {
  "total": 0
}
 GET /staff/educator-roles 200 in 7734ms
[2025-10-08T13:59:45.871Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 1000
}
[2025-10-08T13:59:45.871Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 1000
}
 GET /api/users?role=educators&limit=1000 200 in 8841ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
 ✓ Compiled in 3.4s (4483 modules)
 GET /staff/educator-roles 200 in 760ms
👋 Client disconnected: hVWN0WqbEriuJoG5AAAi
 GET /staff/educator-roles 200 in 631ms
 ○ Compiling /api/user/profile ...
 ✓ Compiled /api/user/profile in 1230ms (2245 modules)
 ✓ Compiled (2247 modules)
[2025-10-08T14:00:27.685Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T14:00:27.685Z] INFO: Users API GET query params {
  "search": "",
  "role": "educators",
  "sort": "desc",
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:00:27.685Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T14:00:27.685Z] INFO: Users API GET filtering by role {
  "role": "educators"
}
[2025-10-08T14:00:27.685Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"educators\""
    }
  }
}
 GET /favicon.ico 200 in 2211ms
Fetching academic years with whereClause: {}
prisma:query SELECT 1
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
 GET /api/semesters 200 in 1927ms
 GET /api/educator-role-assignments?page=1&limit=10 200 in 1928ms
[2025-10-08T14:00:27.787Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
[2025-10-08T14:00:27.817Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:00:27.817Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 1000
}
 GET /api/users?role=educators&limit=1000 200 in 1979ms
 GET /api/user/profile 200 in 2066ms
Found academic years: 3
 GET /api/academic-years 200 in 1981ms
 GET /favicon.ico 200 in 183ms
👤 Client connected: xJIcC2ksDS7hOGqZAAAl
[2025-10-08T14:00:28.067Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T14:00:28.067Z] INFO: Users API GET query params {
  "search": "",
  "role": "educators",
  "sort": "desc",
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:00:28.068Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T14:00:28.068Z] INFO: Users API GET filtering by role {
  "role": "educators"
}
[2025-10-08T14:00:28.068Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"educators\""
    }
  }
}
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
 GET /api/user/profile 200 in 203ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
👤 User user_s6800001 joined their room
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 GET /api/educator-role-assignments?page=1&limit=10 200 in 228ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
 GET /api/semesters 200 in 237ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 227ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T14:00:28.121Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
[2025-10-08T14:00:28.136Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:00:28.136Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 1000
}
 GET /api/users?role=educators&limit=1000 200 in 278ms
 GET /staff/settings 200 in 101ms
 GET /api/user/profile 200 in 34ms
 GET /api/user/profile 200 in 30ms
Fetching academic years with whereClause: {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
 GET /api/semesters 200 in 65ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 86ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 77ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 64ms
 POST /api/academic-years 400 in 70ms
 ✓ Compiled in 5.2s (4433 modules)
 GET /staff/settings 200 in 325ms
 ✓ Compiled in 1859ms (2236 modules)
 GET /staff/settings 200 in 115ms
👋 Client disconnected: xJIcC2ksDS7hOGqZAAAl
 GET /staff/settings 200 in 568ms
 ○ Compiling /api/user/profile ...
👤 Client connected: o3vyu4AweppQqNodAAAo
👤 User user_s6800001 joined their room
 ✓ Compiled /api/user/profile in 624ms (2213 modules)
 ✓ Compiled (2216 modules)
 GET /favicon.ico 200 in 1101ms
 GET /favicon.ico 200 in 24ms
 GET /api/user/profile 200 in 885ms
 GET /api/user/profile 200 in 19ms
 GET /api/user/profile 200 in 46ms
 GET /api/user/profile 200 in 55ms
 ○ Compiling /api/semesters ...
 ✓ Compiled /api/semesters in 1256ms (2230 modules)
 ✓ Compiled in 0ms (2232 modules)
 ✓ Compiled in 0ms (2232 modules)
 ✓ Compiled in 0ms (2232 modules)
Fetching academic years with whereClause: {}
prisma:query SELECT 1
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 3139ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
 ✓ Compiled in 1ms (2232 modules)
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT 1
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/semesters 200 in 4136ms
 GET /staff/settings 200 in 2992ms
 ✓ Compiled in 1ms (2232 modules)
 ✓ Compiled in 1ms (2232 modules)
 ✓ Compiled in 1ms (2232 modules)
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 2616ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 2135ms
 GET /favicon.ico 200 in 1267ms
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz'
👋 Client disconnected: o3vyu4AweppQqNodAAAo
👤 Client connected: 8UL4OopS7qIsvpaZAAAq
👤 User user_s6800001 joined their room
👋 Client disconnected: 8UL4OopS7qIsvpaZAAAq
👤 Client connected: kIIO29EPUcHHNtsNAAAs
👤 User user_s6800001 joined their room
 ✓ Compiled in 8.8s (4433 modules)
 GET /staff/settings 200 in 661ms
 ○ Compiling /favicon.ico ...
 ✓ Compiled /favicon.ico in 695ms (2213 modules)
 GET /favicon.ico 200 in 947ms
👋 Client disconnected: kIIO29EPUcHHNtsNAAAs
👤 Client connected: 0odmHheN7RUdWxU-AAAu
👤 User user_s6800001 joined their room
👋 Client disconnected: 0odmHheN7RUdWxU-AAAu
👤 Client connected: 85BZG9wKNY7P7EIsAAAw
👤 User user_s6800001 joined their room
 ✓ Compiled in 6.2s (4433 modules)
 GET /staff/settings 200 in 223ms
 GET /staff/settings 200 in 488ms
 ○ Compiling /favicon.ico ...
👤 Client connected: MiYJMauY3Ut1eWm5AAAz
👤 User user_s6800001 joined their room
 ✓ Compiled /favicon.ico in 678ms (2213 modules)
 ○ Compiling /api/user/profile ...
 ✓ Compiled /api/user/profile in 1293ms (2216 modules)
 ✓ Compiled /api/semesters in 0ms (2216 modules)
 GET /favicon.ico 200 in 2538ms
 ✓ Compiled in 1ms (2232 modules)
 GET /favicon.ico 200 in 4040ms
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 4508ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
 GET /api/user/profile 200 in 6065ms
Found academic years: 3
 GET /api/academic-years 200 in 4535ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
Fetching academic years with whereClause: {}
 GET /api/user/profile 200 in 125ms
 GET /api/semesters 200 in 163ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
 GET /api/user/profile 200 in 29ms
Found academic years: 3
 GET /api/academic-years 200 in 156ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/user/profile 200 in 22ms
👋 Client disconnected: 85BZG9wKNY7P7EIsAAAw
 DELETE /api/academic-years 401 in 24ms
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/1.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/1.pack.gz'
 ✓ Compiled in 7.3s (4433 modules)
 GET /staff/settings 200 in 552ms
 ✓ Compiled /favicon.ico in 488ms (2213 modules)
 GET /favicon.ico 200 in 694ms
 ✓ Compiled in 3s (4449 modules)
 GET /staff/settings 200 in 237ms
 ○ Compiling /_not-found ...
 ✓ Compiled /_not-found in 1547ms (4439 modules)
👋 Client disconnected: MiYJMauY3Ut1eWm5AAAz
 GET /staff/settings 200 in 903ms
👤 Client connected: 8lSicT-soGBcbGbnAAA2
👤 User user_s6800001 joined their room
 ○ Compiling /api/user/profile ...
👋 Client disconnected: 8lSicT-soGBcbGbnAAA2
👤 Client connected: sUl-omiHL1X6yQBTAAA4
👤 User user_s6800001 joined their room
 ✓ Compiled /api/semesters in 3s (2214 modules)
 ✓ Compiled (2230 modules)
Fetching academic years with whereClause: {}
prisma:query SELECT 1
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
 GET /api/semesters 200 in 3801ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 3
 GET /api/academic-years 200 in 3877ms
 GET /api/user/profile 200 in 6460ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 135ms
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3) OFFSET $4
Found academic years: 3
 GET /api/academic-years 200 in 174ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/user/profile 200 in 94ms
 GET /api/user/profile 200 in 44ms
 GET /api/user/profile 200 in 25ms
 DELETE /api/academic-years 404 in 61ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query UPDATE "public"."academic_years" SET "isActive" = $1, "updatedAt" = $2 WHERE "public"."academic_years"."isActive" = $3
prisma:query COMMIT
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt" FROM "public"."academic_years" WHERE ("public"."academic_years"."year" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."academic_years" ("id","year","name","isActive","startDate","endDate","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
 POST /api/academic-years 200 in 136ms
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT 1
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4) OFFSET $5
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
Found academic years: 4
 GET /api/academic-years 200 in 96ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/semesters 200 in 112ms
prisma:query BEGIN
prisma:query UPDATE "public"."academic_years" SET "isActive" = $1, "updatedAt" = $2 WHERE "public"."academic_years"."isActive" = $3
prisma:query COMMIT
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt" FROM "public"."academic_years" WHERE ("public"."academic_years"."year" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."academic_years" ("id","year","name","isActive","startDate","endDate","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
 POST /api/academic-years 200 in 127ms
Fetching academic years with whereClause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 102ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 5
 GET /api/academic-years 200 in 106ms
 DELETE /api/academic-years 404 in 70ms
👋 Client disconnected: sUl-omiHL1X6yQBTAAA4
👤 Client connected: gOISL9DkEKnlQPjVAAA6
👤 User user_s6800001 joined their room
👋 Client disconnected: gOISL9DkEKnlQPjVAAA6
👤 Client connected: m92Q2kEqgGEURQJfAAA8
👤 User user_s6800001 joined their room
 ✓ Compiled in 5.9s (4433 modules)
 GET /staff/settings 200 in 565ms
👋 Client disconnected: m92Q2kEqgGEURQJfAAA8
 ✓ Compiled in 2.1s (2236 modules)
 GET /staff/settings 200 in 70ms
👤 Client connected: A9xlXHqBuB-5iiuBAAA-
👤 User user_s6800001 joined their room
👋 Client disconnected: A9xlXHqBuB-5iiuBAAA-
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz'
👤 Client connected: hW9WDWpEZsnX2RLAAABA
👤 User user_s6800001 joined their room
👋 Client disconnected: hW9WDWpEZsnX2RLAAABA
👤 Client connected: JqUYy1yckwMU8JMoAABC
👤 User user_s6800001 joined their room
👋 Client disconnected: JqUYy1yckwMU8JMoAABC
👤 Client connected: xyVH7HRbMxuYM-VrAABE
👤 User user_s6800001 joined their room
👋 Client disconnected: xyVH7HRbMxuYM-VrAABE
👤 Client connected: pgRm2a-fUu_OAqBXAABG
👤 User user_s6800001 joined their room
👋 Client disconnected: pgRm2a-fUu_OAqBXAABG
👤 Client connected: tHlL0UVncYUzfD7lAABI
👤 User user_s6800001 joined their room
👋 Client disconnected: tHlL0UVncYUzfD7lAABI
👤 Client connected: ubbVMUXg8mFxPbwEAABK
👤 User user_s6800001 joined their room
👋 Client disconnected: ubbVMUXg8mFxPbwEAABK
👤 Client connected: csNmUmVybom1OlQwAABM
👤 User user_s6800001 joined their room
👋 Client disconnected: csNmUmVybom1OlQwAABM
👤 Client connected: H4oU-6So6UiT-V7wAABO
👤 User user_s6800001 joined their room
👋 Client disconnected: H4oU-6So6UiT-V7wAABO
 ○ Compiling /api/academic-years ...
 ✓ Compiled /api/academic-years in 1232ms (2226 modules)
 GET /staff/settings 200 in 343ms
prisma:query DELETE FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1)
 DELETE /api/academic-years 200 in 1648ms
prisma:query BEGIN
prisma:query UPDATE "public"."academic_years" SET "isActive" = $1, "updatedAt" = $2 WHERE "public"."academic_years"."isActive" = $3
prisma:query COMMIT
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."academic_years" SET "year" = $1, "name" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."academic_years"."id" = $7 AND 1=1) RETURNING "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
prisma:query UPDATE "public"."semesters" SET "name" = $1, "academicYearId" = $2, "startDate" = $3, "endDate" = $4, "isActive" = $5, "updatedAt" = $6 WHERE ("public"."semesters"."id" = $7 AND 1=1) RETURNING "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt"
 POST /api/academic-years 200 in 112ms
 ✓ Compiled /api/semesters in 491ms (2228 modules)
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4) OFFSET $5
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 4
 GET /api/academic-years 200 in 1109ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 1226ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
👤 Client connected: 6Hje2hiLpQTbVsa2AABQ
👤 User user_s6800001 joined their room
 ○ Compiling /api/departments ...
 ✓ Compiled /api/departments in 1846ms (2230 modules)
 ✓ Compiled (2238 modules)
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 2587ms
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 2620ms
prisma:query SELECT 1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/faculties 200 in 2623ms
 GET /api/curriculums 200 in 2624ms
 GET /api/departments 200 in 2626ms
 ✓ Compiled /api/majors in 385ms (2240 modules)
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 799ms
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 855ms
 GET /api/majors 200 in 858ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT 1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/faculties 200 in 864ms
 GET /api/curriculums 200 in 1055ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/departments 200 in 134ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
 GET /api/majors 200 in 102ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /staff/educator-roles 200 in 212ms
 ○ Compiling /api/educator-role-assignments ...
 ✓ Compiled /api/educator-role-assignments in 2.3s (2253 modules)
 ✓ Compiled (2257 modules)
Fetching academic years with whereClause: {}
[2025-10-08T14:25:09.710Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T14:25:09.710Z] INFO: Users API GET query params {
  "search": "",
  "role": "educators",
  "sort": "desc",
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:25:09.711Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T14:25:09.711Z] INFO: Users API GET filtering by role {
  "role": "educators"
}
[2025-10-08T14:25:09.711Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"educators\""
    }
  }
}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4) OFFSET $5
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
 GET /api/semesters 200 in 4748ms
[2025-10-08T14:25:09.733Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/educator-role-assignments?page=1&limit=10 200 in 4823ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 GET /api/user/profile 200 in 4830ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
[2025-10-08T14:25:09.824Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:25:09.824Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 1000
}
 GET /api/users?role=educators&limit=1000 200 in 4849ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 4
 GET /api/academic-years 200 in 4849ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/semesters 200 in 218ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 GET /api/educator-role-assignments?page=1&limit=10 200 in 241ms
[2025-10-08T14:25:10.081Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T14:25:10.081Z] INFO: Users API GET query params {
  "search": "",
  "role": "educators",
  "sort": "desc",
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:25:10.081Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T14:25:10.081Z] INFO: Users API GET filtering by role {
  "role": "educators"
}
[2025-10-08T14:25:10.081Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"educators\""
    }
  }
}
Fetching academic years with whereClause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
[2025-10-08T14:25:10.094Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
[2025-10-08T14:25:10.096Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:25:10.096Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 1000
}
 GET /api/users?role=educators&limit=1000 200 in 240ms
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4) OFFSET $5
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 4
 GET /api/academic-years 200 in 184ms
 GET /api/user/profile 200 in 73ms
 GET /api/user/profile 200 in 132ms
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 151ms
 GET /api/faculties 200 in 239ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 294ms
 GET /api/majors 200 in 292ms
 GET /api/departments 200 in 296ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/curriculums 200 in 299ms
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 214ms
 GET /api/faculties 200 in 158ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
 GET /api/majors 200 in 175ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/departments 200 in 178ms
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 224ms
 GET /api/curriculums 200 in 226ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
👋 Client disconnected: 6Hje2hiLpQTbVsa2AABQ
👤 Client connected: DmXdEI9JVeB9TuDxAABS
👤 User user_s6800001 joined their room
👋 Client disconnected: DmXdEI9JVeB9TuDxAABS
👤 Client connected: zauhgQm3j-yBJ4JNAABU
👤 User user_s6800001 joined their room
👋 Client disconnected: zauhgQm3j-yBJ4JNAABU
👤 Client connected: Ap1xByTwzfuxqQRCAABW
👤 User user_s6800001 joined their room
👋 Client disconnected: Ap1xByTwzfuxqQRCAABW
👤 Client connected: oE3UV7qbSaRXYf2TAABY
👤 User user_s6800001 joined their room
 GET /staff/educator-roles 200 in 251ms
[2025-10-08T14:34:32.987Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T14:34:32.987Z] INFO: Users API GET query params {
  "search": "",
  "role": "educators",
  "sort": "desc",
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:34:32.987Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T14:34:32.988Z] INFO: Users API GET filtering by role {
  "role": "educators"
}
[2025-10-08T14:34:32.988Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"educators\""
    }
  }
}
Fetching academic years with whereClause: {}
[2025-10-08T14:34:33.047Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4) OFFSET $5
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 407ms
Found academic years: 4
 GET /api/academic-years 200 in 452ms
[2025-10-08T14:34:33.138Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:34:33.138Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 1000
}
 GET /api/users?role=educators&limit=1000 200 in 519ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
 GET /api/educator-role-assignments?page=1&limit=10 200 in 423ms
Fetching academic years with whereClause: {}
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4) OFFSET $5
[2025-10-08T14:34:33.261Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T14:34:33.262Z] INFO: Users API GET query params {
  "search": "",
  "role": "educators",
  "sort": "desc",
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:34:33.263Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T14:34:33.263Z] INFO: Users API GET filtering by role {
  "role": "educators"
}
[2025-10-08T14:34:33.263Z] DEBUG: Users API GET where clause {
  "where": {
    "roles": {
      "contains": "\"educators\""
    }
  }
}
Found academic years: 4
 GET /api/academic-years 200 in 116ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T14:34:33.295Z] INFO: Users API GET count complete {
  "total": 0
}
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T14:34:33.311Z] INFO: Users API GET fetched users {
  "fetched": 0,
  "page": 1,
  "limit": 1000
}
[2025-10-08T14:34:33.311Z] INFO: Users API GET response ready {
  "total": 0,
  "returned": 0,
  "page": 1,
  "limit": 1000
}
 GET /api/users?role=educators&limit=1000 200 in 151ms
 GET /api/educator-role-assignments?page=1&limit=10 200 in 152ms
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."roles"::text LIKE $1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
 GET /api/semesters 200 in 166ms
 ○ Compiling /staff/evaluation ...
 ✓ Compiled /staff/evaluation in 8.1s (4492 modules)
 GET /staff/evaluation 200 in 8501ms
 GET /staff/evaluation 200 in 273ms
 ○ Compiling /staff/summary ...
 ✓ Compiled /staff/summary in 2.9s (4466 modules)
 GET /staff/summary 200 in 3863ms
 ○ Compiling /staff/reports ...
 ✓ Compiled /staff/reports in 1073ms (4479 modules)
 GET /staff/reports 200 in 1313ms
👋 Client disconnected: oE3UV7qbSaRXYf2TAABY
 GET /staff/reports 200 in 822ms
👤 Client connected: 9Mem-lNq0bpFx5SvAABb
👤 User user_s6800001 joined their room
 ○ Compiling /api/user/profile ...
 ✓ Compiled /api/user/profile in 2.2s (2223 modules)
 GET /api/user/profile 200 in 2444ms
 GET /api/user/profile 200 in 26ms
 GET /staff/settings 200 in 199ms
 GET /api/user/profile 200 in 74ms
 GET /api/user/profile 200 in 40ms
 ○ Compiling /api/course-categories ...
 ✓ Compiled /api/course-categories in 2.3s (2226 modules)
 ✓ Compiled (2235 modules)
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 2966ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 3008ms
 GET /api/departments 200 in 3007ms
 GET /api/curriculums 200 in 3008ms
 GET /api/faculties 200 in 3034ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
 ✓ Compiled /api/majors in 398ms (2237 modules)
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 895ms
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 940ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/departments 200 in 942ms
 GET /api/majors 200 in 943ms
 GET /api/curriculums 200 in 916ms
 GET /api/faculties 200 in 157ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
 GET /api/majors 200 in 169ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 ✓ Compiled in 4.8s (2264 modules)
 GET /staff/settings 200 in 366ms
 ○ Compiling /api/faculties ...
 ✓ Compiled /api/majors in 33.5s (4499 modules)
prisma:query SELECT 1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT 1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
 GET /api/departments 200 in 10570ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/faculties 200 in 10724ms
 GET /api/curriculums 200 in 10724ms
 GET /api/majors 200 in 10725ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 ⚠ Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
👋 Client disconnected: 9Mem-lNq0bpFx5SvAABb
 GET /staff/settings 200 in 13418ms
 ○ Compiling /api/course-categories ...
 ✓ Compiled /api/course-categories in 771ms (2235 modules)
 ✓ Compiled (2237 modules)
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
👤 Client connected: 4j2Dznd1XMs32WtDAABe
👤 User user_s6800001 joined their room
 ○ Compiling /api/user/profile ...
 ✓ Compiled /api/user/profile in 564ms (2239 modules)
 GET /api/user/profile 200 in 683ms
 GET /api/user/profile 200 in 30ms
 GET /api/user/profile 200 in 34ms
 GET /api/user/profile 200 in 25ms
 GET /api/faculties 200 in 64ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 125ms
 GET /api/departments 200 in 128ms
 GET /api/majors 200 in 129ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/curriculums 200 in 145ms
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 194ms
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 148ms
 GET /api/faculties 200 in 165ms
 GET /api/departments 200 in 167ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/majors 200 in 203ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 130ms
 GET /api/departments 200 in 132ms
 GET /api/curriculums 200 in 134ms
 GET /api/faculties 200 in 135ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/faculties 200 in 139ms
 GET /api/curriculums 200 in 158ms
 GET /api/departments 200 in 159ms
 GET /api/majors 200 in 283ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/curriculums 200 in 45ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/majors 200 in 60ms
 ✓ Compiled in 7.4s (2266 modules)
 GET /staff/settings 200 in 410ms
 ✓ Compiled in 1066ms (2266 modules)
 GET /staff/settings 200 in 84ms
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/3.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/3.pack.gz'
 ✓ Compiled in 3.3s (2266 modules)
 GET /staff/settings 200 in 536ms
 ⨯ ./src/components/admin/settings/DepartmentManagement.tsx
Error: Failed to read source code from /Users/macbookpro/Documents/internship-system/src/components/admin/settings/DepartmentManagement.tsx

Caused by:
    No such file or directory (os error 2)

Import trace for requested module:
./src/components/admin/settings/DepartmentManagement.tsx
./src/app/(dashboard)/staff/academic/page.tsx
 ⨯ ./src/components/admin/settings/CurriculumManagement.tsx
Error: Failed to read source code from /Users/macbookpro/Documents/internship-system/src/components/admin/settings/CurriculumManagement.tsx

Caused by:
    No such file or directory (os error 2)

Import trace for requested module:
./src/components/admin/settings/CurriculumManagement.tsx
./src/app/(dashboard)/staff/academic/page.tsx
 ⨯ ./src/components/admin/settings/CurriculumManagement.tsx
Error: Failed to read source code from /Users/macbookpro/Documents/internship-system/src/components/admin/settings/CurriculumManagement.tsx

Caused by:
    No such file or directory (os error 2)

Import trace for requested module:
./src/components/admin/settings/CurriculumManagement.tsx
./src/app/(dashboard)/staff/academic/page.tsx
 ○ Compiling /_error ...
 ⨯ ./src/components/admin/settings/CurriculumManagement.tsx
Error: Failed to read source code from /Users/macbookpro/Documents/internship-system/src/components/admin/settings/CurriculumManagement.tsx

Caused by:
    No such file or directory (os error 2)

Import trace for requested module:
./src/components/admin/settings/CurriculumManagement.tsx
./src/app/(dashboard)/staff/academic/page.tsx
 GET /staff/settings 500 in 14699ms
👋 Client disconnected: 4j2Dznd1XMs32WtDAABe
 ✓ Compiled /_error in 1726ms (2261 modules)
 ○ Compiling /_not-found ...
 ⚠ Fast Refresh had to perform a full reload due to a runtime error.
 GET /staff/settings 200 in 2996ms
 ✓ Compiled /_not-found in 7.2s (4515 modules)
👤 Client connected: uaU6bCY5qzIe4RC1AABh
👤 User user_s6800001 joined their room
 ✓ Compiled /api/user/profile in 491ms (2268 modules)
 GET /api/user/profile 200 in 753ms
 GET /api/user/profile 200 in 24ms
 GET /api/user/profile 200 in 34ms
 GET /api/user/profile 200 in 31ms
 ✓ Compiled /api/curriculums in 467ms (2272 modules)
 ✓ Compiled (2280 modules)
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 3523ms
 GET /api/departments 200 in 3631ms
 GET /api/curriculums 200 in 3633ms
 GET /api/faculties 200 in 3636ms
 GET /api/majors 200 in 3639ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
 ○ Compiling /api/course-categories ...
 ✓ Compiled /api/course-categories in 1410ms (2282 modules)
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 2025ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
Error fetching courses (returning empty list to keep UI functional): TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/courses/route.ts:21:40)
  19 |     if (categoryId) where.categoryId = categoryId;
  20 |
> 21 |     const courses = await prisma.course.findMany({
     |                                        ^
  22 |       where,
  23 |       include: {
  24 |         category: true,
 GET /api/courses 200 in 1979ms
 GET /api/faculties 200 in 1980ms
 GET /api/departments 200 in 1985ms
 GET /api/curriculums 200 in 1986ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
 GET /api/majors 200 in 103ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
Error fetching course categories: TypeError: Cannot read properties of undefined (reading 'findMany')
    at GET (src/app/api/course-categories/route.ts:6:51)
  4 | export async function GET() {
  5 |   try {
> 6 |     const categories = await prisma.courseCategory.findMany({
    |                                                   ^
  7 |       where: { isActive: true },
  8 |       orderBy: { name: 'asc' }
  9 |     });
 GET /api/course-categories 500 in 329ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
 GET /api/departments 200 in 334ms
 GET /api/faculties 200 in 336ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/curriculums 200 in 364ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
 GET /api/majors 200 in 283ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
 GET /api/faculties 200 in 53ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
 GET /api/departments 200 in 66ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/curriculums 200 in 55ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/majors 200 in 54ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 ✓ Compiled in 6.1s (4507 modules)
 GET /staff/settings 200 in 167ms
 ✓ Compiled in 755ms (2259 modules)
 GET /staff/settings 200 in 69ms
 ✓ Compiled in 2.3s (4507 modules)
 GET /staff/settings 200 in 246ms
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/1.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/1.pack.gz'
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/server-development/1.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/server-development/1.pack.gz'
 ✓ Compiled in 2.6s (2259 modules)
 GET /staff/settings 200 in 74ms
 ✓ Compiled in 2.3s (2260 modules)
 GET /staff/settings 200 in 139ms
 ✓ Compiled in 1646ms (2260 modules)
 GET /staff/settings 200 in 221ms
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz'
 ✓ Compiled in 2.3s (2260 modules)
 GET /staff/settings 200 in 187ms
 ✓ Compiled in 1253ms (2260 modules)
 GET /staff/settings 200 in 111ms
 ✓ Compiled in 1537ms (2260 modules)
 GET /staff/settings 200 in 57ms
 ○ Compiling /login ...
 ✓ Compiled /login in 1500ms (2262 modules)
 GET /login 200 in 1783ms
 GET /login 200 in 442ms
 ○ Compiling /api/auth/verify ...
 ✓ Compiled /api/auth/verify in 793ms (2293 modules)
🔍 Auth verify API called
📝 Request body: { identifier: 'admin@smart-solutions.com', password: '***' }
 POST /api/auth/verify 200 in 1011ms
 ✓ Compiled /api/auth/login in 501ms (2295 modules)
 Login API called
 Request body: {
  identifier: 'admin@smart-solutions.com',
  role: 'admin',
  password: '***'
}
 POST /api/auth/login 200 in 588ms
👋 Client disconnected: uaU6bCY5qzIe4RC1AABh
👤 Client connected: 5wLzqJ4N7o6RSnVXAABj
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: 5wLzqJ4N7o6RSnVXAABj
 ○ Compiling /admin ...
👤 Client connected: gHUkGNonbKczUae2AABl
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: gHUkGNonbKczUae2AABl
👤 Client connected: IA_UwYQ0ooEGKFz9AABn
👤 User user_admin joined their room
👑 Admin joined admin room
 ✓ Compiled /admin in 4.6s (4564 modules)
 GET /admin 200 in 4920ms
 GET /admin 200 in 272ms
 ○ Compiling /api/user/profile ...
 ✓ Compiled /api/user/profile in 766ms (2303 modules)
 GET /api/user/profile 200 in 897ms
 GET /api/user/profile 200 in 79ms
 ○ Compiling /admin/educator-roles ...
 ✓ Compiled /admin/educator-roles in 3.1s (4554 modules)
 GET /admin/educator-roles 200 in 3342ms
 ○ Compiling /api/educator-role-assignments ...
 ✓ Compiled /admin/settings in 1650ms (2307 modules)
 ✓ Compiled in 2.9s (2266 modules)
Fetching academic years with whereClause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4) OFFSET $5
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
Found academic years: 4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/semesters 200 in 5675ms
 GET /api/educator-role-assignments?page=1&limit=10 200 in 5674ms
 GET /api/academic-years 200 in 5675ms
 GET /api/students?role=educators&limit=1000 200 in 5684ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE ("public"."users"."roles"::text LIKE $1 OR "public"."users"."roles"::text LIKE $2 OR "public"."users"."roles"::text LIKE $3 OR "public"."users"."roles"::text LIKE $4 OR "public"."users"."roles"::text LIKE $5 OR "public"."users"."roles"::text LIKE $6 OR "public"."users"."roles"::text LIKE $7 OR "public"."users"."roles"::text LIKE $8 OR "public"."users"."roles"::text LIKE $9 OR "public"."users"."roles"::text LIKE $10 OR "public"."users"."roles"::text LIKE $11 OR "public"."users"."roles"::text LIKE $12) OFFSET $13) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear" FROM "public"."users" WHERE ("public"."users"."roles"::text LIKE $1 OR "public"."users"."roles"::text LIKE $2 OR "public"."users"."roles"::text LIKE $3 OR "public"."users"."roles"::text LIKE $4 OR "public"."users"."roles"::text LIKE $5 OR "public"."users"."roles"::text LIKE $6 OR "public"."users"."roles"::text LIKE $7 OR "public"."users"."roles"::text LIKE $8 OR "public"."users"."roles"::text LIKE $9 OR "public"."users"."roles"::text LIKE $10 OR "public"."users"."roles"::text LIKE $11 OR "public"."users"."roles"::text LIKE $12) ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC LIMIT $13 OFFSET $14
 GET /admin/settings 200 in 4592ms
Fetching academic years with whereClause: {}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."educator_role_assignments"."id" FROM "public"."educator_role_assignments" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."educator_role_assignments"."id", "public"."educator_role_assignments"."educatorId", "public"."educator_role_assignments"."academicYearId", "public"."educator_role_assignments"."semesterId", "public"."educator_role_assignments"."roles", "public"."educator_role_assignments"."isActive", "public"."educator_role_assignments"."notes", "public"."educator_role_assignments"."createdAt", "public"."educator_role_assignments"."updatedAt" FROM "public"."educator_role_assignments" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."educator_role_assignments"."academicYearId") LEFT JOIN "public"."semesters" AS "orderby_2" ON ("orderby_2"."id") = ("public"."educator_role_assignments"."semesterId") LEFT JOIN "public"."users" AS "orderby_3" ON ("orderby_3"."id") = ("public"."educator_role_assignments"."educatorId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "orderby_2"."startDate" DESC, "orderby_3"."name" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."nameEn", "public"."academic_years"."isActive", "public"."academic_years"."startDate", "public"."academic_years"."endDate", "public"."academic_years"."createdAt", "public"."academic_years"."updatedAt", COALESCE("aggr_selection_0_Semester"."_aggr_count_semesters", 0) AS "_aggr_count_semesters", COALESCE("aggr_selection_1_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."academic_years" LEFT JOIN (SELECT "public"."semesters"."academicYearId", COUNT(*) AS "_aggr_count_semesters" FROM "public"."semesters" WHERE 1=1 GROUP BY "public"."semesters"."academicYearId") AS "aggr_selection_0_Semester" ON ("public"."academic_years"."id" = "aggr_selection_0_Semester"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."academicYearId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."academicYearId") AS "aggr_selection_1_EducatorRoleAssignment" ON ("public"."academic_years"."id" = "aggr_selection_1_EducatorRoleAssignment"."academicYearId") WHERE 1=1 ORDER BY "public"."academic_years"."year" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."academicYearId" FROM "public"."semesters" WHERE "public"."semesters"."academicYearId" IN ($1,$2,$3,$4) OFFSET $5
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."startDate", "public"."semesters"."endDate" FROM "public"."semesters" WHERE "public"."semesters"."id" IN ($1) OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."academic_years"."id" FROM "public"."academic_years" WHERE 1=1 OFFSET $1) AS "sub"
Found academic years: 4
 GET /api/semesters 200 in 408ms
 GET /api/educator-role-assignments?page=1&limit=10 200 in 388ms
 GET /api/academic-years 200 in 387ms
 GET /api/students?role=educators&limit=1000 200 in 401ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE ("public"."users"."roles"::text LIKE $1 OR "public"."users"."roles"::text LIKE $2 OR "public"."users"."roles"::text LIKE $3 OR "public"."users"."roles"::text LIKE $4 OR "public"."users"."roles"::text LIKE $5 OR "public"."users"."roles"::text LIKE $6 OR "public"."users"."roles"::text LIKE $7 OR "public"."users"."roles"::text LIKE $8 OR "public"."users"."roles"::text LIKE $9 OR "public"."users"."roles"::text LIKE $10 OR "public"."users"."roles"::text LIKE $11 OR "public"."users"."roles"::text LIKE $12) OFFSET $13) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear" FROM "public"."users" WHERE ("public"."users"."roles"::text LIKE $1 OR "public"."users"."roles"::text LIKE $2 OR "public"."users"."roles"::text LIKE $3 OR "public"."users"."roles"::text LIKE $4 OR "public"."users"."roles"::text LIKE $5 OR "public"."users"."roles"::text LIKE $6 OR "public"."users"."roles"::text LIKE $7 OR "public"."users"."roles"::text LIKE $8 OR "public"."users"."roles"::text LIKE $9 OR "public"."users"."roles"::text LIKE $10 OR "public"."users"."roles"::text LIKE $11 OR "public"."users"."roles"::text LIKE $12) ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC LIMIT $13 OFFSET $14
 ○ Compiling /api/curriculums ...
 ✓ Compiled /api/curriculums in 1046ms (2333 modules)
 ✓ Compiled in 2.2s (2266 modules)
Document template GET error: TypeError: Cannot read properties of undefined (reading 'findFirst')
    at GET (src/app/api/document-template/route.ts:12:51)
  10 |
  11 |     // Get document template settings
> 12 |     const template = await prisma.documentTemplate.findFirst({
     |                                                   ^
  13 |       where: { type: 'DOCUMENT_NUMBER' }
  14 |     });
  15 |
 GET /api/document-template 500 in 3867ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/departments 200 in 3948ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
 GET /api/faculties 200 in 3983ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
 GET /api/curriculums 200 in 4013ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
 GET /api/majors 200 in 4031ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
Document template GET error: TypeError: Cannot read properties of undefined (reading 'findFirst')
    at GET (src/app/api/document-template/route.ts:12:51)
  10 |
  11 |     // Get document template settings
> 12 |     const template = await prisma.documentTemplate.findFirst({
     |                                                   ^
  13 |       where: { type: 'DOCUMENT_NUMBER' }
  14 |     });
  15 |
 GET /api/document-template 500 in 250ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/departments 200 in 339ms
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/majors 200 in 233ms
 GET /api/curriculums 200 in 253ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
 GET /api/faculties 200 in 264ms
👋 Client disconnected: IA_UwYQ0ooEGKFz9AABn
 ✓ Compiled in 2.5s (2280 modules)
 GET /admin/settings 200 in 268ms
👤 Client connected: LQA5Fu9vZJVFAsKEAABp
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: LQA5Fu9vZJVFAsKEAABp
👤 Client connected: B3DnfoHqBJCysW40AABr
👤 User user_admin joined their room
 ✓ Compiled in 1496ms (2280 modules)
 GET /admin/settings 200 in 236ms
 ○ Compiling /admin/companies ...
 ✓ Compiled /admin/companies in 1322ms (2336 modules)
 GET /admin/companies 200 in 1572ms
 ○ Compiling /api/companies ...
 ✓ Compiled /api/companies in 3.1s (4618 modules)
🔍 Companies API called by: Admin
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."companies"."id" FROM "public"."companies" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt", COALESCE("aggr_selection_0_Internship"."_aggr_count_internships", 0) AS "_aggr_count_internships" FROM "public"."companies" LEFT JOIN (SELECT "public"."internships"."companyId", COUNT(*) AS "_aggr_count_internships" FROM "public"."internships" WHERE 1=1 GROUP BY "public"."internships"."companyId") AS "aggr_selection_0_Internship" ON ("public"."companies"."id" = "aggr_selection_0_Internship"."companyId") WHERE 1=1 ORDER BY "public"."companies"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /api/companies?search=&industry=all&size=all&isActive=all&sort=desc&page=1&limit=10&lang=en 200 in 3339ms
🔍 Companies API called by: Admin
 GET /api/companies?search=&industry=all&size=all&isActive=all&sort=desc&page=1&limit=10&lang=en 200 in 364ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."companies"."id" FROM "public"."companies" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt", COALESCE("aggr_selection_0_Internship"."_aggr_count_internships", 0) AS "_aggr_count_internships" FROM "public"."companies" LEFT JOIN (SELECT "public"."internships"."companyId", COUNT(*) AS "_aggr_count_internships" FROM "public"."internships" WHERE 1=1 GROUP BY "public"."internships"."companyId") AS "aggr_selection_0_Internship" ON ("public"."companies"."id" = "aggr_selection_0_Internship"."companyId") WHERE 1=1 ORDER BY "public"."companies"."createdAt" DESC LIMIT $1 OFFSET $2
 GET /admin/companies 200 in 554ms
 ○ Compiling /admin/companies/[id] ...
 ✓ Compiled /admin/companies/[id] in 3.4s (4616 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 5002ms
 ○ Compiling /api/companies/[id] ...
 ✓ Compiled /api/companies/[id] in 1069ms (4618 modules)
Company API - Fetching company: cmghekxxx0001xp2e8te2qzdw by: System Administrator
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE ("public"."companies"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."description", "public"."internships"."location", "public"."internships"."type"::text, "public"."internships"."companyId" FROM "public"."internships" WHERE "public"."internships"."companyId" IN ($1) OFFSET $2
Company API - Found company: สามารถไทย
 GET /api/companies/cmghekxxx0001xp2e8te2qzdw 200 in 2183ms
Company API - Fetching company: cmghekxxx0001xp2e8te2qzdw by: System Administrator
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE ("public"."companies"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
Company API - Found company: สามารถไทย
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."description", "public"."internships"."location", "public"."internships"."type"::text, "public"."internships"."companyId" FROM "public"."internships" WHERE "public"."internships"."companyId" IN ($1) OFFSET $2
 GET /api/companies/cmghekxxx0001xp2e8te2qzdw 200 in 170ms
 ○ Compiling /api/address/provinces ...
 ✓ Compiled /api/address/provinces in 1316ms (4620 modules)
 GET /api/address/provinces?lang=th 200 in 1465ms
 GET /api/address/provinces?lang=th 200 in 58ms
👋 Client disconnected: B3DnfoHqBJCysW40AABr
👤 Client connected: MR4BL3w0PzhuCJHMAABt
👤 User user_admin joined their room
👋 Client disconnected: MR4BL3w0PzhuCJHMAABt
👤 Client connected: caqgqfQ9mvGSeCEyAABv
👤 User user_admin joined their room
👋 Client disconnected: caqgqfQ9mvGSeCEyAABv
👤 Client connected: B8ELz6JMb3I02sLwAABx
👤 User user_admin joined their room
👋 Client disconnected: B8ELz6JMb3I02sLwAABx
👤 Client connected: 3gNhrrwkyLl3DV_sAABz
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: 3gNhrrwkyLl3DV_sAABz
👤 Client connected: ljooWdeYhOzcC2HQAAB1
👤 User user_admin joined their room
👑 Admin joined admin room
 ✓ Compiled in 8.2s (4028 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 889ms
 ✓ Compiled in 2.5s (2284 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 453ms
 ✓ Compiled in 3.7s (2284 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 447ms
👋 Client disconnected: ljooWdeYhOzcC2HQAAB1
👤 Client connected: tgI9_jIrjFYoRJgVAAB3
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: tgI9_jIrjFYoRJgVAAB3
 ✓ Compiled in 5.2s (2284 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 334ms
👤 Client connected: lbQBogIbVQKKqcpXAAB5
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: lbQBogIbVQKKqcpXAAB5
👤 Client connected: PwaZ85iLCV4Wm3DCAAB7
👤 User user_admin joined their room
 ✓ Compiled in 1813ms (2284 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 174ms
 ✓ Compiled in 3.8s (2284 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 333ms
👋 Client disconnected: PwaZ85iLCV4Wm3DCAAB7
👤 Client connected: PRjRSZeS1yRkbTsAAAB9
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: PRjRSZeS1yRkbTsAAAB9
👤 Client connected: p1wVFbMzPU71fuqUAAB_
👤 User user_admin joined their room
👑 Admin joined admin room
 ✓ Compiled in 8.5s (4028 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 668ms
 ✓ Compiled in 3.9s (4028 modules)
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 438ms
👋 Client disconnected: p1wVFbMzPU71fuqUAAB_
👤 Client connected: SaZVajtOaScjmjcqAACB
👤 User user_admin joined their room
👑 Admin joined admin room
 ○ Compiling /admin/applications ...
👋 Client disconnected: SaZVajtOaScjmjcqAACB
 ✓ Compiled /admin/applications in 11.7s (4024 modules)
 GET /admin/applications 200 in 11998ms
 ○ Compiling /api/applications ...
 ✓ Compiled /api/applications in 1547ms (4043 modules)
Applications API - Fetching applications by: Admin studentId: null internshipId: null
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."applications"."id" FROM "public"."applications" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE 1=1 ORDER BY "public"."applications"."dateApplied" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname", "public"."users"."majorId" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."titleEn", "public"."internships"."companyId", "public"."internships"."location", "public"."internships"."description", "public"."internships"."descriptionEn", "public"."internships"."type"::text FROM "public"."internships" WHERE "public"."internships"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE "public"."companies"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
Applications API - Found applications: 10 total: 10
 GET /api/applications?search=&status=all&sort=priority&page=1&limit=10 200 in 1991ms
Applications API - Fetching applications by: Admin studentId: null internshipId: null
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."applications"."id" FROM "public"."applications" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE 1=1 ORDER BY "public"."applications"."dateApplied" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname", "public"."users"."majorId" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."titleEn", "public"."internships"."companyId", "public"."internships"."location", "public"."internships"."description", "public"."internships"."descriptionEn", "public"."internships"."type"::text FROM "public"."internships" WHERE "public"."internships"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE "public"."companies"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
Applications API - Found applications: 10 total: 10
 GET /api/applications?search=&status=all&sort=priority&page=1&limit=10 200 in 67ms
👤 Client connected: Wa6Q3HwoV45WQUfiAACD
👤 User user_admin joined their room
👋 Client disconnected: Wa6Q3HwoV45WQUfiAACD
👤 Client connected: UXIEzMoyph6nk089AACF
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: UXIEzMoyph6nk089AACF
👤 Client connected: AeREarlZFa_I0x0pAACH
👤 User user_admin joined their room
👋 Client disconnected: AeREarlZFa_I0x0pAACH
👤 Client connected: c3TUwKCJBQNO2P3PAACJ
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: c3TUwKCJBQNO2P3PAACJ
👤 Client connected: AsAzfFfexT6BWpSFAACL
👤 User user_admin joined their room
👋 Client disconnected: AsAzfFfexT6BWpSFAACL
👤 Client connected: g9dlZcL1UaGHVicwAACN
👤 User user_admin joined their room
👋 Client disconnected: g9dlZcL1UaGHVicwAACN
👤 Client connected: 1hFCz4ULJYMPHZbKAACP
👤 User user_admin joined their room
👋 Client disconnected: 1hFCz4ULJYMPHZbKAACP
 ✓ Compiled in 7s (2287 modules)
 GET /admin/applications 200 in 489ms
👤 Client connected: q_INmLYrzCrLq3DjAACR
👤 User user_admin joined their room
👑 Admin joined admin room
 GET /admin/companies 200 in 691ms
 ✓ Compiled in 2.7s (2287 modules)
 GET /admin/companies 200 in 101ms
 ○ Compiling /api/companies ...
 ✓ Compiled /api/companies in 7s (1755 modules)
🔍 Companies API called by: Admin
 GET /api/companies?search=&industry=all&size=all&isActive=all&sort=desc&page=1&limit=10&lang=en 200 in 7628ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."companies"."id" FROM "public"."companies" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt", COALESCE("aggr_selection_0_Internship"."_aggr_count_internships", 0) AS "_aggr_count_internships" FROM "public"."companies" LEFT JOIN (SELECT "public"."internships"."companyId", COUNT(*) AS "_aggr_count_internships" FROM "public"."internships" WHERE 1=1 GROUP BY "public"."internships"."companyId") AS "aggr_selection_0_Internship" ON ("public"."companies"."id" = "aggr_selection_0_Internship"."companyId") WHERE 1=1 ORDER BY "public"."companies"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."provinces"."id", "public"."provinces"."nameTh", "public"."provinces"."nameEn", "public"."provinces"."code" FROM "public"."provinces" WHERE "public"."provinces"."id" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."districts"."id", "public"."districts"."nameTh", "public"."districts"."nameEn", "public"."districts"."code", "public"."districts"."provinceId" FROM "public"."districts" WHERE "public"."districts"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."subdistricts"."id", "public"."subdistricts"."nameTh", "public"."subdistricts"."nameEn", "public"."subdistricts"."code", "public"."subdistricts"."postalCode", "public"."subdistricts"."districtId" FROM "public"."subdistricts" WHERE "public"."subdistricts"."id" IN ($1) OFFSET $2
 GET /admin/companies 200 in 733ms
🔍 Companies API called by: Admin
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt", COALESCE("aggr_selection_0_Internship"."_aggr_count_internships", 0) AS "_aggr_count_internships" FROM "public"."companies" LEFT JOIN (SELECT "public"."internships"."companyId", COUNT(*) AS "_aggr_count_internships" FROM "public"."internships" WHERE 1=1 GROUP BY "public"."internships"."companyId") AS "aggr_selection_0_Internship" ON ("public"."companies"."id" = "aggr_selection_0_Internship"."companyId") WHERE 1=1 ORDER BY "public"."companies"."createdAt" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."provinces"."id", "public"."provinces"."nameTh", "public"."provinces"."nameEn", "public"."provinces"."code" FROM "public"."provinces" WHERE "public"."provinces"."id" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."districts"."id", "public"."districts"."nameTh", "public"."districts"."nameEn", "public"."districts"."code", "public"."districts"."provinceId" FROM "public"."districts" WHERE "public"."districts"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."subdistricts"."id", "public"."subdistricts"."nameTh", "public"."subdistricts"."nameEn", "public"."subdistricts"."code", "public"."subdistricts"."postalCode", "public"."subdistricts"."districtId" FROM "public"."subdistricts" WHERE "public"."subdistricts"."id" IN ($1) OFFSET $2
 GET /api/companies?search=&industry=all&size=all&isActive=all&sort=desc&page=1&limit=10&lang=en 200 in 269ms
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."companies"."id" FROM "public"."companies" WHERE 1=1 OFFSET $1) AS "sub"
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 123ms
 ○ Compiling /api/companies/[id] ...
 ✓ Compiled /api/companies/[id] in 2.2s (1757 modules)
Company API - Fetching company: cmghekxxx0001xp2e8te2qzdw by: System Administrator
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE ("public"."companies"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."provinces"."id", "public"."provinces"."nameTh", "public"."provinces"."nameEn", "public"."provinces"."code" FROM "public"."provinces" WHERE "public"."provinces"."id" IN ($1) OFFSET $2
Company API - Found company: สามารถไทย
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."description", "public"."internships"."location", "public"."internships"."type"::text, "public"."internships"."companyId" FROM "public"."internships" WHERE "public"."internships"."companyId" IN ($1) OFFSET $2
 GET /api/companies/cmghekxxx0001xp2e8te2qzdw 200 in 2803ms
 ○ Compiling /api/address/provinces ...
Company API - Fetching company: cmghekxxx0001xp2e8te2qzdw by: System Administrator
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 2956ms
Company API - Found company: สามารถไทย
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE ("public"."companies"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."provinces"."id", "public"."provinces"."nameTh", "public"."provinces"."nameEn", "public"."provinces"."code" FROM "public"."provinces" WHERE "public"."provinces"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."description", "public"."internships"."location", "public"."internships"."type"::text, "public"."internships"."companyId" FROM "public"."internships" WHERE "public"."internships"."companyId" IN ($1) OFFSET $2
 GET /api/companies/cmghekxxx0001xp2e8te2qzdw 200 in 2430ms
 ✓ Compiled /api/address/provinces in 6.2s (4046 modules)
 GET /api/address/provinces?lang=th 200 in 6407ms
 GET /admin/companies/cmghekxxx0001xp2e8te2qzdw 200 in 313ms
 GET /api/address/provinces?lang=th 200 in 81ms
👋 Client disconnected: q_INmLYrzCrLq3DjAACR
👤 Client connected: B7SEqmLVqfY5bKBaAACT
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: B7SEqmLVqfY5bKBaAACT
👤 Client connected: XuRvH6fyYeS8UOpMAACV
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: XuRvH6fyYeS8UOpMAACV
👤 Client connected: fCcWwIhrzdEITteQAACX
👤 User user_admin joined their room
 ○ Compiling /admin/users ...
 ✓ Compiled /admin/users in 7.7s (1781 modules)
 GET /admin/users 200 in 7960ms
 GET /admin/users 200 in 100ms
 ○ Compiling /api/users ...
 ✓ Compiled /api/users in 2.6s (1820 modules)
[2025-10-08T15:49:45.122Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T15:49:45.123Z] INFO: Users API GET query params {
  "search": "",
  "role": "all",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T15:49:45.123Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T15:49:45.123Z] DEBUG: Users API GET where clause {
  "where": {}
}
prisma:query SELECT 1
[2025-10-08T15:49:45.135Z] INFO: Users API GET count complete {
  "total": 89
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE 1=1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $1 OFFSET $2
[2025-10-08T15:49:45.143Z] INFO: Users API GET fetched users {
  "fetched": 10,
  "page": 1,
  "limit": 10
}
[2025-10-08T15:49:45.143Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gr0009xpyrldcy6crr",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.144Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7fl0003xpyrg2sb8xdz",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.144Z] WARN: Users API GET failed to parse roles {
  "userId": "65010999",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.144Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gf0007xpyrtzfefk69",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.144Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7hj000dxpyr46pg38js",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.144Z] INFO: Users API GET response ready {
  "total": 89,
  "returned": 10,
  "page": 1,
  "limit": 10
}
 GET /api/users?search=&role=all&sort=desc&page=1&limit=10 200 in 3174ms
[2025-10-08T15:49:45.246Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T15:49:45.246Z] INFO: Users API GET query params {
  "search": "",
  "role": "all",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T15:49:45.246Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T15:49:45.246Z] DEBUG: Users API GET where clause {
  "where": {}
}
[2025-10-08T15:49:45.255Z] INFO: Users API GET count complete {
  "total": 89
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T15:49:45.375Z] INFO: Users API GET fetched users {
  "fetched": 10,
  "page": 1,
  "limit": 10
}
[2025-10-08T15:49:45.375Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gr0009xpyrldcy6crr",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.375Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7fl0003xpyrg2sb8xdz",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.376Z] WARN: Users API GET failed to parse roles {
  "userId": "65010999",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.376Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gf0007xpyrtzfefk69",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.376Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7hj000dxpyr46pg38js",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:49:45.376Z] INFO: Users API GET response ready {
  "total": 89,
  "returned": 10,
  "page": 1,
  "limit": 10
}
 GET /api/users?search=&role=all&sort=desc&page=1&limit=10 200 in 218ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE 1=1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $1 OFFSET $2
👋 Client disconnected: fCcWwIhrzdEITteQAACX
 ○ Compiling /admin/users/[id] ...
 ✓ Compiled /admin/users/[id] in 10.5s (4098 modules)
[2025-10-08T15:50:30.438Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T15:50:30.438Z] INFO: Users API GET query params {
  "search": "",
  "role": "all",
  "sort": "asc",
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:30.439Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T15:50:30.439Z] DEBUG: Users API GET where clause {
  "where": {}
}
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T15:50:30.460Z] INFO: Users API GET count complete {
  "total": 89
}
[2025-10-08T15:50:30.467Z] INFO: Users API GET fetched users {
  "fetched": 10,
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:30.468Z] INFO: Users API GET response ready {
  "total": 89,
  "returned": 10,
  "page": 1,
  "limit": 10
}
 GET /api/users?search=&role=all&sort=asc&page=1&limit=10 200 in 307ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE 1=1 ORDER BY "public"."users"."updatedAt" ASC, "public"."users"."createdAt" ASC, "public"."users"."name" ASC LIMIT $1 OFFSET $2
 GET /admin/users/test_user_ci_002 200 in 13678ms
 ○ Compiling /api/users/[id] ...
 ✓ Compiled /api/users/[id] in 2.2s (4102 modules)
Error: Route "/api/users/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/users/[id]/route.ts:47:12)
  45 |     // Temporarily bypass auth for testing admin/staff UI
  46 |
> 47 |     const { id } = params;
     |            ^
  48 |     const normalizedId = decodeURIComponent(id).trim();
  49 |     console.info('GET /api/users/[id] - fetching user', { id, normalizedId });
  50 |     const user = await prisma.user.findUnique({
GET /api/users/[id] - fetching user { id: 'test_user_ci_002', normalizedId: 'test_user_ci_002' }
 GET /api/users/test_user_ci_002 200 in 4915ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."facultyId", "public"."users"."departmentId", "public"."users"."curriculumId", "public"."users"."majorId", "public"."users"."studentYear" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
Error: Route "/api/users/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/users/[id]/route.ts:47:12)
  45 |     // Temporarily bypass auth for testing admin/staff UI
  46 |
> 47 |     const { id } = params;
     |            ^
  48 |     const normalizedId = decodeURIComponent(id).trim();
  49 |     console.info('GET /api/users/[id] - fetching user', { id, normalizedId });
  50 |     const user = await prisma.user.findUnique({
GET /api/users/[id] - fetching user { id: 'test_user_ci_002', normalizedId: 'test_user_ci_002' }
 GET /api/users/test_user_ci_002 200 in 284ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."facultyId", "public"."users"."departmentId", "public"."users"."curriculumId", "public"."users"."majorId", "public"."users"."studentYear" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
👤 Client connected: OdLCs1gpdq7pvdTJAACZ
👤 User user_admin joined their room
👑 Admin joined admin room
 GET /admin/users 200 in 191ms
[2025-10-08T15:50:45.931Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T15:50:45.931Z] INFO: Users API GET query params {
  "search": "",
  "role": "all",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:45.932Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T15:50:45.932Z] DEBUG: Users API GET where clause {
  "where": {}
}
[2025-10-08T15:50:45.964Z] INFO: Users API GET count complete {
  "total": 89
}
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE 1=1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $1 OFFSET $2
[2025-10-08T15:50:45.978Z] INFO: Users API GET fetched users {
  "fetched": 10,
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:45.979Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gr0009xpyrldcy6crr",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:45.980Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7fl0003xpyrg2sb8xdz",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:45.980Z] WARN: Users API GET failed to parse roles {
  "userId": "65010999",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:45.981Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gf0007xpyrtzfefk69",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:45.981Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7hj000dxpyr46pg38js",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:45.981Z] INFO: Users API GET response ready {
  "total": 89,
  "returned": 10,
  "page": 1,
  "limit": 10
}
 GET /api/users?search=&role=all&sort=desc&page=1&limit=10 200 in 211ms
[2025-10-08T15:50:46.104Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T15:50:46.104Z] INFO: Users API GET query params {
  "search": "",
  "role": "all",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:46.104Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T15:50:46.104Z] DEBUG: Users API GET where clause {
  "where": {}
}
[2025-10-08T15:50:46.113Z] INFO: Users API GET count complete {
  "total": 89
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T15:50:46.123Z] INFO: Users API GET fetched users {
  "fetched": 10,
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:46.123Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gr0009xpyrldcy6crr",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:46.123Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7fl0003xpyrg2sb8xdz",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:46.123Z] WARN: Users API GET failed to parse roles {
  "userId": "65010999",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:46.123Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gf0007xpyrtzfefk69",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:46.123Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7hj000dxpyr46pg38js",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:46.123Z] INFO: Users API GET response ready {
  "total": 89,
  "returned": 10,
  "page": 1,
  "limit": 10
}
 GET /api/users?search=&role=all&sort=desc&page=1&limit=10 200 in 122ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE 1=1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $1 OFFSET $2
[2025-10-08T15:50:57.329Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T15:50:57.330Z] INFO: Users API GET query params {
  "search": "",
  "role": "all",
  "sort": "asc",
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:57.330Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T15:50:57.330Z] DEBUG: Users API GET where clause {
  "where": {}
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T15:50:57.339Z] INFO: Users API GET count complete {
  "total": 89
}
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE 1=1 ORDER BY "public"."users"."updatedAt" ASC, "public"."users"."createdAt" ASC, "public"."users"."name" ASC LIMIT $1 OFFSET $2
[2025-10-08T15:50:57.343Z] INFO: Users API GET fetched users {
  "fetched": 10,
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:57.343Z] INFO: Users API GET response ready {
  "total": 89,
  "returned": 10,
  "page": 1,
  "limit": 10
}
 GET /api/users?search=&role=all&sort=asc&page=1&limit=10 200 in 72ms
[2025-10-08T15:50:59.011Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T15:50:59.011Z] INFO: Users API GET query params {
  "search": "",
  "role": "all",
  "sort": "desc",
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:59.011Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T15:50:59.011Z] DEBUG: Users API GET where clause {
  "where": {}
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T15:50:59.014Z] INFO: Users API GET count complete {
  "total": 89
}
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE 1=1 ORDER BY "public"."users"."updatedAt" DESC, "public"."users"."createdAt" DESC, "public"."users"."name" ASC LIMIT $1 OFFSET $2
[2025-10-08T15:50:59.040Z] INFO: Users API GET fetched users {
  "fetched": 10,
  "page": 1,
  "limit": 10
}
[2025-10-08T15:50:59.040Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gr0009xpyrldcy6crr",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:59.040Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7fl0003xpyrg2sb8xdz",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:59.040Z] WARN: Users API GET failed to parse roles {
  "userId": "65010999",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:59.040Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7gf0007xpyrtzfefk69",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:59.040Z] WARN: Users API GET failed to parse roles {
  "userId": "cmgbvp7hj000dxpyr46pg38js",
  "roles": "student",
  "error": "Unexpected token 's', \"student\" is not valid JSON"
}
[2025-10-08T15:50:59.040Z] INFO: Users API GET response ready {
  "total": 89,
  "returned": 10,
  "page": 1,
  "limit": 10
}
 GET /api/users?search=&role=all&sort=desc&page=1&limit=10 200 in 101ms
[2025-10-08T15:51:00.614Z] INFO: Users API GET called {
  "byUserId": "admin",
  "byUserName": "Admin"
}
[2025-10-08T15:51:00.614Z] INFO: Users API GET query params {
  "search": "",
  "role": "all",
  "sort": "asc",
  "page": 1,
  "limit": 10
}
[2025-10-08T15:51:00.614Z] DEBUG: Users API GET: Database connected {}
[2025-10-08T15:51:00.614Z] DEBUG: Users API GET where clause {
  "where": {}
}
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."users"."id" FROM "public"."users" WHERE 1=1 OFFSET $1) AS "sub"
[2025-10-08T15:51:00.624Z] INFO: Users API GET count complete {
  "total": 89
}
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."studentYear", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE 1=1 ORDER BY "public"."users"."updatedAt" ASC, "public"."users"."createdAt" ASC, "public"."users"."name" ASC LIMIT $1 OFFSET $2
[2025-10-08T15:51:00.629Z] INFO: Users API GET fetched users {
  "fetched": 10,
  "page": 1,
  "limit": 10
}
[2025-10-08T15:51:00.629Z] INFO: Users API GET response ready {
  "total": 89,
  "returned": 10,
  "page": 1,
  "limit": 10
}
 GET /api/users?search=&role=all&sort=asc&page=1&limit=10 200 in 71ms
 GET /admin/applications 200 in 133ms
 ○ Compiling /api/applications ...
 ✓ Compiled /api/applications in 809ms (972 modules)
Applications API - Fetching applications by: Admin studentId: null internshipId: null
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."applications"."id" FROM "public"."applications" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE 1=1 ORDER BY "public"."applications"."dateApplied" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname", "public"."users"."majorId" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."titleEn", "public"."internships"."companyId", "public"."internships"."location", "public"."internships"."description", "public"."internships"."descriptionEn", "public"."internships"."type"::text FROM "public"."internships" WHERE "public"."internships"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE "public"."companies"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
Applications API - Found applications: 10 total: 10
 GET /api/applications?search=&status=all&sort=priority&page=1&limit=10 200 in 967ms
Applications API - Fetching applications by: Admin studentId: null internshipId: null
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."applications"."id" FROM "public"."applications" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE 1=1 ORDER BY "public"."applications"."dateApplied" ASC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname", "public"."users"."majorId" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."titleEn", "public"."internships"."companyId", "public"."internships"."location", "public"."internships"."description", "public"."internships"."descriptionEn", "public"."internships"."type"::text FROM "public"."internships" WHERE "public"."internships"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE "public"."companies"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
Applications API - Found applications: 10 total: 10
 GET /api/applications?search=&status=all&sort=priority&page=1&limit=10 200 in 131ms
 ○ Compiling /admin/applications/[applicationId] ...
 ✓ Compiled /admin/applications/[applicationId] in 1882ms (3280 modules)
 GET /admin/applications/approved_app_003 200 in 4499ms
👋 Client disconnected: OdLCs1gpdq7pvdTJAACZ
 ✓ Compiled in 2.2s (2292 modules)
 GET /admin/applications/approved_app_003 200 in 317ms
 ○ Compiling /admin/settings ...
 ✓ Compiled /admin/settings in 1040ms (1839 modules)
 GET /admin/settings 200 in 1451ms
 ○ Compiling /api/document-template ...
 ✓ Compiled /api/document-template in 1329ms (1841 modules)
 ✓ Compiled (1849 modules)
Document template GET error: TypeError: Cannot read properties of undefined (reading 'findFirst')
    at GET (src/app/api/document-template/route.ts:12:51)
  10 |
  11 |     // Get document template settings
> 12 |     const template = await prisma.documentTemplate.findFirst({
     |                                                   ^
  13 |       where: { type: 'DOCUMENT_NUMBER' }
  14 |     });
  15 |
 GET /api/document-template 500 in 2642ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/curriculums 200 in 2709ms
 GET /api/majors 200 in 2720ms
 GET /api/departments 200 in 2723ms
 GET /api/faculties 200 in 2742ms
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
Document template GET error: TypeError: Cannot read properties of undefined (reading 'findFirst')
    at GET (src/app/api/document-template/route.ts:12:51)
  10 |
  11 |     // Get document template settings
> 12 |     const template = await prisma.documentTemplate.findFirst({
     |                                                   ^
  13 |       where: { type: 'DOCUMENT_NUMBER' }
  14 |     });
  15 |
 GET /api/document-template 500 in 183ms
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE 1=1 ORDER BY "public"."majors"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt", COALESCE("aggr_selection_0_Department"."_aggr_count_departments", 0) AS "_aggr_count_departments", COALESCE("aggr_selection_1_User"."_aggr_count_users", 0) AS "_aggr_count_users" FROM "public"."faculties" LEFT JOIN (SELECT "public"."departments"."facultyId", COUNT(*) AS "_aggr_count_departments" FROM "public"."departments" WHERE 1=1 GROUP BY "public"."departments"."facultyId") AS "aggr_selection_0_Department" ON ("public"."faculties"."id" = "aggr_selection_0_Department"."facultyId") LEFT JOIN (SELECT "public"."users"."facultyId", COUNT(*) AS "_aggr_count_users" FROM "public"."users" WHERE 1=1 GROUP BY "public"."users"."facultyId") AS "aggr_selection_1_User" ON ("public"."faculties"."id" = "aggr_selection_1_User"."facultyId") WHERE "public"."faculties"."isActive" = $1 ORDER BY "public"."faculties"."nameTh" ASC OFFSET $2
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
 GET /api/majors 200 in 217ms
 GET /api/faculties 200 in 226ms
 GET /api/departments 200 in 230ms
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE 1=1 ORDER BY "public"."departments"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE "public"."curriculums"."departmentId" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."curriculums"."id", "public"."curriculums"."nameTh", "public"."curriculums"."nameEn", "public"."curriculums"."code", "public"."curriculums"."degree", "public"."curriculums"."departmentId", "public"."curriculums"."isActive", "public"."curriculums"."createdAt", "public"."curriculums"."updatedAt" FROM "public"."curriculums" WHERE 1=1 ORDER BY "public"."curriculums"."nameTh" ASC OFFSET $1
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."departments"."id", "public"."departments"."nameTh", "public"."departments"."nameEn", "public"."departments"."code", "public"."departments"."facultyId", "public"."departments"."isActive", "public"."departments"."createdAt", "public"."departments"."updatedAt" FROM "public"."departments" WHERE "public"."departments"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."faculties"."id", "public"."faculties"."nameTh", "public"."faculties"."nameEn", "public"."faculties"."code", "public"."faculties"."isActive", "public"."faculties"."createdAt", "public"."faculties"."updatedAt" FROM "public"."faculties" WHERE "public"."faculties"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."majors"."id", "public"."majors"."nameTh", "public"."majors"."nameEn", "public"."majors"."curriculumId", "public"."majors"."area", "public"."majors"."isActive", "public"."majors"."createdAt", "public"."majors"."updatedAt" FROM "public"."majors" WHERE "public"."majors"."curriculumId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/curriculums 200 in 232ms
👤 Client connected: YxZSDQcikuZeZyG3AACb
👤 User user_admin joined their room
 ✓ Compiled in 1924ms (2292 modules)
 GET /admin/settings 200 in 174ms
Document template PUT error: TypeError: Cannot read properties of undefined (reading 'upsert')
    at PUT (src/app/api/document-template/route.ts:95:34)
  93 |
  94 |     // Upsert document template
> 95 |     await prisma.documentTemplate.upsert({
     |                                  ^
  96 |       where: { type: 'DOCUMENT_NUMBER' },
  97 |       update: { config: JSON.stringify(config) },
  98 |       create: {
 PUT /api/document-template 500 in 132ms
👋 Client disconnected: YxZSDQcikuZeZyG3AACb
 ✓ Compiled in 2.9s (2292 modules)
 GET /admin/settings 200 in 63ms
👤 Client connected: d9bFyylaDWQAPy73AACd
👤 User user_admin joined their room
👋 Client disconnected: d9bFyylaDWQAPy73AACd
👤 Client connected: qyW1Tgh3HCO90ZGLAACf
👤 User user_admin joined their room
👋 Client disconnected: qyW1Tgh3HCO90ZGLAACf
👤 Client connected: FZrK-LOf0S-C9qX8AACh
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: FZrK-LOf0S-C9qX8AACh
👤 Client connected: Vooqg2yuxfD2BX-yAACj
👤 User user_admin joined their room
👋 Client disconnected: Vooqg2yuxfD2BX-yAACj
👤 Client connected: DfUwBdAXWscivFOVAACl
👤 User user_admin joined their room
👋 Client disconnected: DfUwBdAXWscivFOVAACl
 ✓ Compiled in 4.9s (2292 modules)
 GET /admin/settings 200 in 253ms
👤 Client connected: G-Ex6C3D0SHI7zYSAACn
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: G-Ex6C3D0SHI7zYSAACn
👤 Client connected: UrcbvC7cXOQfj80xAACp
👤 User user_admin joined their room
👑 Admin joined admin room
 ✓ Compiled in 4.1s (2292 modules)
 GET /admin/settings 200 in 194ms
👋 Client disconnected: UrcbvC7cXOQfj80xAACp
👤 Client connected: YCxjNH7-Oh3EE_FiAACr
👤 User user_admin joined their room
👋 Client disconnected: YCxjNH7-Oh3EE_FiAACr
👤 Client connected: jhuDtXhKS4mce7FvAACt
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: jhuDtXhKS4mce7FvAACt
👤 Client connected: yQRxMBC1xnbTa-UvAACv
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: yQRxMBC1xnbTa-UvAACv
👤 Client connected: XP32hrfMXZ_9VVqYAACx
👤 User user_admin joined their room
👋 Client disconnected: XP32hrfMXZ_9VVqYAACx
👤 Client connected: QOdaxYSP8Wi6fvfcAACz
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: QOdaxYSP8Wi6fvfcAACz
👤 Client connected: Jpbg6NTa543ILzCfAAC1
👤 User user_admin joined their room
👋 Client disconnected: Jpbg6NTa543ILzCfAAC1
👤 Client connected: jIoAzYOnf0dWirjSAAC3
👤 User user_admin joined their room
👋 Client disconnected: jIoAzYOnf0dWirjSAAC3
👤 Client connected: nTI2eG75YYU7T9aeAAC5
👤 User user_admin joined their room
👋 Client disconnected: nTI2eG75YYU7T9aeAAC5
👤 Client connected: st98QL1dxepHxSB2AAC7
👤 User user_admin joined their room
👋 Client disconnected: st98QL1dxepHxSB2AAC7
👤 Client connected: DvdtxcBcixNBCUIoAAC9
👤 User user_admin joined their room
👋 Client disconnected: DvdtxcBcixNBCUIoAAC9
👤 Client connected: aeEPvALI1R1Q0cIWAAC_
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: aeEPvALI1R1Q0cIWAAC_
👤 Client connected: jU3fAwQ-9uRZ-A3iAADB
👤 User user_admin joined their room
👋 Client disconnected: jU3fAwQ-9uRZ-A3iAADB
👤 Client connected: QeDgBlaSiTlx2V6pAADD
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: QeDgBlaSiTlx2V6pAADD
👤 Client connected: xsRm6N_fR4Dd7bTAAADF
👤 User user_admin joined their room
👑 Admin joined admin room
 GET /admin/applications 200 in 499ms
Applications API - Fetching applications by: Admin studentId: null internshipId: null
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE 1=1 ORDER BY "public"."applications"."dateApplied" ASC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."applications"."id" FROM "public"."applications" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname", "public"."users"."majorId" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."titleEn", "public"."internships"."companyId", "public"."internships"."location", "public"."internships"."description", "public"."internships"."descriptionEn", "public"."internships"."type"::text FROM "public"."internships" WHERE "public"."internships"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE "public"."companies"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
Applications API - Found applications: 10 total: 10
 GET /api/applications?search=&status=all&sort=priority&page=1&limit=10 200 in 277ms
Applications API - Fetching applications by: Admin studentId: null internshipId: null
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE 1=1 ORDER BY "public"."applications"."dateApplied" ASC LIMIT $1 OFFSET $2
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."applications"."id" FROM "public"."applications" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."t_name", "public"."users"."t_surname", "public"."users"."e_name", "public"."users"."e_surname", "public"."users"."majorId" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."internships"."id", "public"."internships"."title", "public"."internships"."titleEn", "public"."internships"."companyId", "public"."internships"."location", "public"."internships"."description", "public"."internships"."descriptionEn", "public"."internships"."type"::text FROM "public"."internships" WHERE "public"."internships"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
Applications API - Found applications: 10 total: 10
 GET /api/applications?search=&status=all&sort=priority&page=1&limit=10 200 in 221ms
prisma:query SELECT "public"."companies"."id", "public"."companies"."name", "public"."companies"."nameEn", "public"."companies"."address", "public"."companies"."addressEn", "public"."companies"."province", "public"."companies"."district", "public"."companies"."subdistrict", "public"."companies"."postalCode", "public"."companies"."phone", "public"."companies"."email", "public"."companies"."website", "public"."companies"."description", "public"."companies"."descriptionEn", "public"."companies"."industry", "public"."companies"."industryEn", "public"."companies"."latitude", "public"."companies"."longitude", "public"."companies"."provinceIdRef", "public"."companies"."districtIdRef", "public"."companies"."subdistrictIdRef", "public"."companies"."size"::text, "public"."companies"."isActive", "public"."companies"."createdAt", "public"."companies"."updatedAt" FROM "public"."companies" WHERE "public"."companies"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /admin/applications/approved_app_002 200 in 504ms
👋 Client disconnected: xsRm6N_fR4Dd7bTAAADF
 ○ Compiling /login ...
👤 Client connected: FfpyURPGR7oj_2IAAADH
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: FfpyURPGR7oj_2IAAADH
👤 Client connected: vCyIGBvS5VUAF0NgAADJ
👤 User user_admin joined their room
 ✓ Compiled /login in 11.9s (4113 modules)
 GET /login 200 in 12383ms
 GET /login 200 in 79ms
👋 Client disconnected: vCyIGBvS5VUAF0NgAADJ
👤 Client connected: mKUlz1usxcj4rEKpAADL
👤 User user_admin joined their room
👋 Client disconnected: mKUlz1usxcj4rEKpAADL
👤 Client connected: DOc7pgvy01xfzC3xAADN
👤 User user_admin joined their room
👋 Client disconnected: DOc7pgvy01xfzC3xAADN
👤 Client connected: jBBLvGz5ZYx0FILtAADP
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: jBBLvGz5ZYx0FILtAADP
👤 Client connected: INBrZ7rvEjB49BxDAADR
👤 User user_admin joined their room
👋 Client disconnected: INBrZ7rvEjB49BxDAADR
👤 Client connected: jmQ4UltLUfPxviIXAADT
👤 User user_admin joined their room
👋 Client disconnected: jmQ4UltLUfPxviIXAADT
👤 Client connected: qWaistwWnLk2RdfZAADV
👤 User user_admin joined their room
👋 Client disconnected: qWaistwWnLk2RdfZAADV
👤 Client connected: 435HScdIjrA1YS2_AADX
👤 User user_admin joined their room
👋 Client disconnected: 435HScdIjrA1YS2_AADX
👤 Client connected: p0m21CbJOarlnPtvAADZ
👤 User user_admin joined their room
👋 Client disconnected: p0m21CbJOarlnPtvAADZ
👤 Client connected: Bj-iCKJBWbxaXXzQAADb
👤 User user_admin joined their room
 GET /admin/applications/approved_app_002 200 in 1273ms
👤 Client connected: 310Zwo2iY3dRjoEbAADd
 GET /login 200 in 140ms
👋 Client disconnected: Bj-iCKJBWbxaXXzQAADb
 ○ Compiling /api/auth/verify ...
 ✓ Compiled /api/auth/verify in 1698ms (1826 modules)
🔍 Auth verify API called
📝 Request body: { identifier: 'admin@smart-solutions.com', password: '***' }
 POST /api/auth/verify 200 in 1806ms
 ✓ Compiled /api/auth/login in 295ms (1828 modules)
 Login API called
 Request body: {
  identifier: 'admin@smart-solutions.com',
  role: 'admin',
  password: '***'
}
 POST /api/auth/login 200 in 726ms
👤 Client connected: d102QqG4EAv2IAj-AADf
 ○ Compiling /admin ...
👤 User user_admin joined their room
👑 Admin joined admin room
👋 Client disconnected: d102QqG4EAv2IAj-AADf
👤 Client connected: EbhK5wVINfZssldcAADh
👤 User user_admin joined their room
 ✓ Compiled /admin in 3.7s (1834 modules)
 GET /admin 200 in 4085ms
 ○ Compiling /api/user/profile ...
 ✓ Compiled /api/user/profile in 812ms (1836 modules)
 GET /api/user/profile 200 in 913ms
 GET /api/user/profile 200 in 31ms
👋 Client disconnected: 310Zwo2iY3dRjoEbAADd
 GET /login 200 in 263ms
 GET /login 200 in 119ms
👋 Client disconnected: EbhK5wVINfZssldcAADh
🔍 Auth verify API called
📝 Request body: { identifier: 'u6800002@smart-solutions.com', password: '***' }
 POST /api/auth/verify 200 in 106ms
 Login API called
 Request body: {
  identifier: 'u6800002@smart-solutions.com',
  role: 'student',
  password: '***'
}
 POST /api/auth/login 200 in 74ms
👤 Client connected: JZ3sDbzrpqDVUVF7AADj
👤 User u6800002 joined their room
👋 Client disconnected: JZ3sDbzrpqDVUVF7AADj
 ○ Compiling /student ...
👤 Client connected: Rsu4TuGreJpPQj6nAADl
👤 User u6800002 joined their room
👋 Client disconnected: Rsu4TuGreJpPQj6nAADl
👤 Client connected: 4_ZuBWR5as1LG6tXAADn
👤 User u6800002 joined their room
 ✓ Compiled /student in 16.7s (4078 modules)
 GET /student 200 in 17303ms
 GET /api/user/profile 200 in 3343ms
 ○ Compiling /api/student/dashboard ...
 ✓ Compiled /api/student/dashboard in 8.3s (4081 modules)
Student Dashboard API - Fetching data for user: u6800002
 GET /api/user/profile 200 in 8449ms
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE "public"."applications"."studentId" = $1 ORDER BY "public"."applications"."dateApplied" DESC OFFSET $2
 GET /api/student/dashboard 200 in 10700ms
Student Dashboard API - Fetching data for user: u6800002
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE "public"."applications"."studentId" = $1 ORDER BY "public"."applications"."dateApplied" DESC OFFSET $2
 GET /api/student/dashboard 200 in 125ms
 ✓ Compiled in 2.3s (2297 modules)
 GET /student 200 in 377ms
👋 Client disconnected: 4_ZuBWR5as1LG6tXAADn
👤 Client connected: depOdC_o0K3eil_xAADp
👤 User u6800002 joined their room
👋 Client disconnected: depOdC_o0K3eil_xAADp
👤 Client connected: Wv-Z_Ebf-6XgHOMBAADr
👤 User u6800002 joined their room
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/10.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/10.pack.gz'
👋 Client disconnected: Wv-Z_Ebf-6XgHOMBAADr
 ✓ Compiled in 2.3s (2297 modules)
 GET /student 200 in 140ms
👤 Client connected: cGVk9D-zhk9OQ4s2AADt
👤 User u6800002 joined their room
 ✓ Compiled in 2s (2297 modules)
 GET /student 200 in 189ms
 ✓ Compiled in 2.3s (2297 modules)
 GET /student 200 in 536ms
👋 Client disconnected: cGVk9D-zhk9OQ4s2AADt
 ✓ Compiled in 1092ms (2297 modules)
 GET /student 200 in 70ms
👤 Client connected: uN02y66sdgZtb9QEAADv
👤 User u6800002 joined their room
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz'
👋 Client disconnected: uN02y66sdgZtb9QEAADv
👤 Client connected: MBU_hk0OKYOoajulAADx
👤 User u6800002 joined their room
👋 Client disconnected: MBU_hk0OKYOoajulAADx
👤 Client connected: A790o_Lrilb5SQagAADz
👤 User u6800002 joined their room
👋 Client disconnected: A790o_Lrilb5SQagAADz
 ○ Compiling /student/application-form ...
👤 Client connected: VsRwMxS8hUaVqGXOAAD1
👤 User u6800002 joined their room
👋 Client disconnected: VsRwMxS8hUaVqGXOAAD1
👤 Client connected: vPJW1VFClyVNyU7GAAD3
👤 User u6800002 joined their room
 ✓ Compiled /student/application-form in 10.5s (4056 modules)
 GET /student/application-form 200 in 11124ms
 GET /student/application-form 200 in 341ms
 ○ Compiling /api/user/profile ...
 ✓ Compiled /api/user/profile in 1309ms (1774 modules)
 GET /api/user/profile 200 in 1592ms
 ○ Compiling /api/student/applications ...
 ✓ Compiled /api/student/applications in 6.2s (4068 modules)
 GET /api/user/profile 200 in 6368ms
[2025-10-08T16:34:29.326Z] INFO: Student Applications API - GET request started {}
[2025-10-08T16:34:29.393Z] INFO: Student Applications API - Fetching applications {
  "userId": "u6800002",
  "status": "all",
  "page": 1,
  "limit": 1
}
prisma:query SELECT "public"."applications"."id", "public"."applications"."studentId", "public"."applications"."internshipId", "public"."applications"."status"::text, "public"."applications"."dateApplied", "public"."applications"."feedback", "public"."applications"."projectTopic", "public"."applications"."projectTopicEn", "public"."applications"."printRecordId" FROM "public"."applications" WHERE "public"."applications"."studentId" = $1 ORDER BY "public"."applications"."dateApplied" DESC LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."applications"."id" FROM "public"."applications" WHERE "public"."applications"."studentId" = $1 OFFSET $2) AS "sub"
[2025-10-08T16:34:29.461Z] INFO: Student Applications API - GET request completed {
  "userId": "u6800002",
  "duration": 135,
  "totalApplications": 0
}
 GET /api/student/applications?limit=1 200 in 6553ms
[2025-10-08T16:34:29.541Z] INFO: Student Applications API - GET request started {}
[2025-10-08T16:34:29.606Z] INFO: Student Applications API - Fetching applications {
  "userId": "u6800002",
  "status": "all",
  "page": 1,
  "limit": 1
}
[2025-10-08T16:34:29.606Z] INFO: Student Applications API - Cache hit {
  "userId": "u6800002"
}
 GET /api/student/applications?limit=1 200 in 125ms
 ○ Compiling /student/project-details ...
 ✓ Compiled /student/project-details in 7.6s (4053 modules)
 GET /student/project-details 200 in 8404ms
 ○ Compiling /api/student/project-details ...
 ✓ Compiled /api/student/project-details in 4.5s (1773 modules)
 ○ Compiling /student/settings ...
👋 Client disconnected: vPJW1VFClyVNyU7GAAD3
 ✓ Compiled /student/settings in 18.8s (4099 modules)
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."semesters"."id", "public"."semesters"."name", "public"."semesters"."nameEn", "public"."semesters"."academicYearId", "public"."semesters"."startDate", "public"."semesters"."endDate", "public"."semesters"."isActive", "public"."semesters"."createdAt", "public"."semesters"."updatedAt", COALESCE("aggr_selection_0_EducatorRoleAssignment"."_aggr_count_roleAssignments", 0) AS "_aggr_count_roleAssignments" FROM "public"."semesters" LEFT JOIN "public"."academic_years" AS "orderby_1" ON ("orderby_1"."id") = ("public"."semesters"."academicYearId") LEFT JOIN (SELECT "public"."educator_role_assignments"."semesterId", COUNT(*) AS "_aggr_count_roleAssignments" FROM "public"."educator_role_assignments" WHERE 1=1 GROUP BY "public"."educator_role_assignments"."semesterId") AS "aggr_selection_0_EducatorRoleAssignment" ON ("public"."semesters"."id" = "aggr_selection_0_EducatorRoleAssignment"."semesterId") WHERE 1=1 ORDER BY "orderby_1"."year" DESC, "public"."semesters"."startDate" DESC LIMIT $1 OFFSET $2
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT "public"."academic_years"."id", "public"."academic_years"."year", "public"."academic_years"."name", "public"."academic_years"."isActive" FROM "public"."academic_years" WHERE "public"."academic_years"."id" IN ($1,$2,$3) OFFSET $4
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count$_all" FROM (SELECT "public"."semesters"."id" FROM "public"."semesters" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/semesters 200 in 3731ms
 GET /api/semesters 200 in 25197ms
[2025-10-08T16:35:10.034Z] INFO: ProjectDetails API GET {
  "userId": "u6800002",
  "hasProject": false
}
[2025-10-08T16:35:10.034Z] INFO: ProjectDetails API GET done {
  "durationMs": 304
}
[2025-10-08T16:35:10.034Z] INFO: ProjectDetails API GET {
  "userId": "u6800002",
  "hasProject": false
}
[2025-10-08T16:35:10.035Z] INFO: ProjectDetails API GET done {
  "durationMs": 296
}
 GET /api/student/project-details 200 in 25205ms
 GET /api/student/project-details 200 in 3830ms
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."password", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."facultyId", "public"."users"."departmentId", "public"."users"."curriculumId", "public"."users"."majorId", "public"."users"."studentYear", "public"."users"."phone", "public"."users"."campus", "public"."users"."gpa", "public"."users"."nationality", "public"."users"."passportId", "public"."users"."visaType", "public"."users"."profileImage", "public"."users"."notifyEmail", "public"."users"."notifyPush", "public"."users"."notifySms", "public"."users"."notifyAppUpdates", "public"."users"."notifyDeadlines", "public"."users"."notifyNews", "public"."users"."language", "public"."users"."theme", "public"."users"."dateFormat", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2) OFFSET $3
 GET /student/settings 200 in 22037ms
 GET /student/settings 200 in 4643ms
 ○ Compiling /api/user/settings ...
👤 Client connected: Eh3D3uMc3VJM9-ytAAD5
👤 User u6800002 joined their room
👋 Client disconnected: Eh3D3uMc3VJM9-ytAAD5
👤 Client connected: JCb_DKRBcg5PBKbYAAD7
👤 User u6800002 joined their room
 ✓ Compiled /api/user/settings in 21.8s (3233 modules)
 GET /api/user/profile 200 in 22400ms
Academic API - Fetching faculties with relations
 GET /api/user/profile 200 in 2506ms
Academic API - Found faculties: 1
Settings API - User ID: u6800002
Settings API - Querying database for user: u6800002
Settings API - User ID: u6800002
Settings API - Querying database for user: u6800002
 GET /api/academic/faculties?lang=th 200 in 22679ms
Settings API - Database query result: User found
API Settings - Full user data: {
  id: 'u6800002',
  name: 'Student 002',
  email: 'u6800002@smart-solutions.com',
  password: '$2a$12$vEtoEDHE3CnGAhEpuweCZesUr9SCgaO6rp/Ju6OAjHuAEh951q1OO',
  roles: '["student"]',
  skills: null,
  statement: null,
  t_title: 'นาย',
  t_name: 'Student',
  t_middle_name: null,
  t_surname: '002',
  e_title: 'Mr.',
  e_name: 'Student',
  e_middle_name: null,
  e_surname: '002',
  facultyId: null,
  departmentId: null,
  curriculumId: null,
  majorId: null,
  studentYear: null,
  phone: null,
  campus: null,
  gpa: null,
  nationality: null,
  passportId: null,
  visaType: null,
  profileImage: null,
  notifyEmail: true,
  notifyPush: false,
  notifySms: false,
  notifyAppUpdates: true,
  notifyDeadlines: true,
  notifyNews: false,
  language: 'th',
  theme: 'light',
  dateFormat: 'thai',
  createdAt: 2025-10-03T12:43:52.633Z,
  updatedAt: 2025-10-08T05:48:26.362Z,
  faculty: null,
  department: null,
  curriculum: null,
  major: null
}
API Settings - Full settings data: {
  thaiTitle: 'นาย',
  thaiName: 'Student',
  thaiMiddleName: '',
  thaiSurname: '002',
  englishTitle: 'Mr.',
  englishName: 'Student',
  englishMiddleName: '',
  englishSurname: '002',
  email: 'u6800002@smart-solutions.com',
  phone: '',
  studentId: 'u6800002',
  faculty: '',
  department: '',
  program: '',
  major: '',
  campus: '',
  gpa: '',
  nationality: 'ไทย',
  passportId: '',
  visaType: 'none',
  skills: '',
  statement: '',
  notifications: {
    email: true,
    push: false,
    sms: false,
    applicationUpdates: true,
    deadlineReminders: true,
    systemNews: false
  },
  preferences: { language: 'th', theme: 'light', dateFormat: 'thai' }
}
Settings API - Returning settings for user: u6800002
Settings API - Thai Name: Student 002
Settings API - English Name: Student 002
Settings API - Full user data: {
  "id": "u6800002",
  "name": "Student 002",
  "email": "u6800002@smart-solutions.com",
  "roles": [
    "student"
  ]
}
Settings API - Full settings data: {
  "thaiTitle": "นาย",
  "thaiName": "Student",
  "thaiMiddleName": "",
  "thaiSurname": "002",
  "englishTitle": "Mr.",
  "englishName": "Student",
  "englishMiddleName": "",
  "englishSurname": "002",
  "email": "u6800002@smart-solutions.com",
  "phone": "",
  "studentId": "u6800002",
  "faculty": "",
  "department": "",
  "program": "",
  "major": "",
  "campus": "",
  "gpa": "",
  "nationality": "ไทย",
  "passportId": "",
  "visaType": "none",
  "skills": "",
  "statement": "",
  "notifications": {
    "email": true,
    "push": false,
    "sms": false,
    "applicationUpdates": true,
    "deadlineReminders": true,
    "systemNews": false
  },
  "preferences": {
    "language": "th",
    "theme": "light",
    "dateFormat": "thai"
  }
}
Settings API - Database query result: User found
API Settings - Full user data: {
  id: 'u6800002',
  name: 'Student 002',
  email: 'u6800002@smart-solutions.com',
  password: '$2a$12$vEtoEDHE3CnGAhEpuweCZesUr9SCgaO6rp/Ju6OAjHuAEh951q1OO',
  roles: '["student"]',
  skills: null,
  statement: null,
  t_title: 'นาย',
  t_name: 'Student',
  t_middle_name: null,
  t_surname: '002',
  e_title: 'Mr.',
  e_name: 'Student',
  e_middle_name: null,
  e_surname: '002',
  facultyId: null,
  departmentId: null,
  curriculumId: null,
  majorId: null,
  studentYear: null,
  phone: null,
  campus: null,
  gpa: null,
  nationality: null,
  passportId: null,
  visaType: null,
  profileImage: null,
  notifyEmail: true,
  notifyPush: false,
  notifySms: false,
  notifyAppUpdates: true,
  notifyDeadlines: true,
  notifyNews: false,
  language: 'th',
  theme: 'light',
  dateFormat: 'thai',
  createdAt: 2025-10-03T12:43:52.633Z,
  updatedAt: 2025-10-08T05:48:26.362Z,
  faculty: null,
  department: null,
  curriculum: null,
  major: null
}
API Settings - Full settings data: {
  thaiTitle: 'นาย',
  thaiName: 'Student',
  thaiMiddleName: '',
  thaiSurname: '002',
  englishTitle: 'Mr.',
  englishName: 'Student',
  englishMiddleName: '',
  englishSurname: '002',
  email: 'u6800002@smart-solutions.com',
  phone: '',
  studentId: 'u6800002',
  faculty: '',
  department: '',
  program: '',
  major: '',
  campus: '',
  gpa: '',
  nationality: 'ไทย',
  passportId: '',
  visaType: 'none',
  skills: '',
  statement: '',
  notifications: {
    email: true,
    push: false,
    sms: false,
    applicationUpdates: true,
    deadlineReminders: true,
    systemNews: false
  },
  preferences: { language: 'th', theme: 'light', dateFormat: 'thai' }
}
Settings API - Returning settings for user: u6800002
Settings API - Thai Name: Student 002
Settings API - English Name: Student 002
Settings API - Full user data: {
  "id": "u6800002",
  "name": "Student 002",
  "email": "u6800002@smart-solutions.com",
  "roles": [
    "student"
  ]
}
Settings API - Full settings data: {
  "thaiTitle": "นาย",
  "thaiName": "Student",
  "thaiMiddleName": "",
  "thaiSurname": "002",
  "englishTitle": "Mr.",
  "englishName": "Student",
  "englishMiddleName": "",
  "englishSurname": "002",
  "email": "u6800002@smart-solutions.com",
  "phone": "",
  "studentId": "u6800002",
  "faculty": "",
  "department": "",
  "program": "",
  "major": "",
  "campus": "",
  "gpa": "",
  "nationality": "ไทย",
  "passportId": "",
  "visaType": "none",
  "skills": "",
  "statement": "",
  "notifications": {
    "email": true,
    "push": false,
    "sms": false,
    "applicationUpdates": true,
    "deadlineReminders": true,
    "systemNews": false
  },
  "preferences": {
    "language": "th",
    "theme": "light",
    "dateFormat": "thai"
  }
}
prisma:query SELECT 1
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."password", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."facultyId", "public"."users"."departmentId", "public"."users"."curriculumId", "public"."users"."majorId", "public"."users"."studentYear", "public"."users"."phone", "public"."users"."campus", "public"."users"."gpa", "public"."users"."nationality", "public"."users"."passportId", "public"."users"."visaType", "public"."users"."profileImage", "public"."users"."notifyEmail", "public"."users"."notifyPush", "public"."users"."notifySms", "public"."users"."notifyAppUpdates", "public"."users"."notifyDeadlines", "public"."users"."notifyNews", "public"."users"."language", "public"."users"."theme", "public"."users"."dateFormat", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2) OFFSET $3
 GET /api/user/settings 200 in 22776ms
 GET /api/user/settings 200 in 2590ms
Academic API - Fetching faculties with relations
Academic API - Found faculties: 1
 GET /api/academic/faculties?lang=th 200 in 598ms
 ○ Compiling /_not-found ...
 ✓ Compiled /_not-found in 2.1s (3216 modules)
 GET /placeholder-avatar.jpg 404 in 2612ms
👋 Client disconnected: JCb_DKRBcg5PBKbYAAD7
 ✓ Compiled in 7.2s (2312 modules)
 GET /student/settings 200 in 547ms
 ✓ Compiled in 7.7s (2312 modules)
 GET /student/settings 200 in 249ms
👤 Client connected: SEFfVvfTQhLXc1KCAAD9
👤 User u6800002 joined their room
👋 Client disconnected: SEFfVvfTQhLXc1KCAAD9
👤 Client connected: MWu9-Om2pjNpU2GTAAD_
👤 User u6800002 joined their room
👋 Client disconnected: MWu9-Om2pjNpU2GTAAD_
👤 Client connected: 11LXxtkPs510PpkyAAEB
👤 User u6800002 joined their room
👋 Client disconnected: 11LXxtkPs510PpkyAAEB
 ✓ Compiled in 5.9s (2312 modules)
 GET /student/settings 200 in 194ms
 ✓ Compiled in 1893ms (2312 modules)
 GET /student/settings 200 in 99ms
👤 Client connected: Do6z2dU64NpwBVBtAAED
👤 User u6800002 joined their room
 ✓ Compiled in 1842ms (2312 modules)
 GET /student/settings 200 in 266ms
 ✓ Compiled in 1145ms (2312 modules)
 GET /student/settings 200 in 57ms
👋 Client disconnected: Do6z2dU64NpwBVBtAAED
👤 Client connected: mEtemQRMGOx84a7uAAEF
👤 User u6800002 joined their room
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/2.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/2.pack.gz'
👋 Client disconnected: mEtemQRMGOx84a7uAAEF
👤 Client connected: K06yOXs10IhQAHYdAAEH
👤 User u6800002 joined their room
 ✓ Compiled in 1696ms (2312 modules)
 GET /student/settings 200 in 92ms
👋 Client disconnected: K06yOXs10IhQAHYdAAEH
 ✓ Compiled in 1977ms (2312 modules)
 GET /student/settings 200 in 194ms
👤 Client connected: G6EPofgQs_rQ1-j9AAEJ
👤 User u6800002 joined their room
👋 Client disconnected: G6EPofgQs_rQ1-j9AAEJ
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz'
👤 Client connected: POzSQxVGt9LDgLVUAAEL
👤 User u6800002 joined their room
👋 Client disconnected: POzSQxVGt9LDgLVUAAEL
👤 Client connected: rWGdDQxkS5FRT_kbAAEN
👤 User u6800002 joined their room
👋 Client disconnected: rWGdDQxkS5FRT_kbAAEN
👤 Client connected: O3M5hLajVJFJSSGeAAEP
👤 User u6800002 joined their room
👋 Client disconnected: O3M5hLajVJFJSSGeAAEP
👤 Client connected: wwoBf3AQadPkKWMyAAER
👤 User u6800002 joined their room
👋 Client disconnected: wwoBf3AQadPkKWMyAAER
👤 Client connected: YA13imoMa8npAn3AAAET
👤 User u6800002 joined their room
👋 Client disconnected: YA13imoMa8npAn3AAAET
👤 Client connected: gonh0qkfotEQUCNAAAEV
👤 User u6800002 joined their room
👋 Client disconnected: gonh0qkfotEQUCNAAAEV
👤 Client connected: kpbT2JI3OjmbKyV_AAEX
👤 User u6800002 joined their room
👋 Client disconnected: kpbT2JI3OjmbKyV_AAEX
 GET /student/settings 200 in 1138ms
Academic API - Fetching faculties with relations
 GET /api/user/profile 200 in 140ms
Academic API - Found faculties: 1
Settings API - User ID: u6800002
Settings API - Querying database for user: u6800002
 GET /api/academic/faculties?lang=th 200 in 344ms
👤 Client connected: kfdkJP71ux02Ppg2AAEa
Settings API - Database query result: User found
API Settings - Full user data: {
  id: 'u6800002',
  name: 'Student 002',
  email: 'u6800002@smart-solutions.com',
  password: '$2a$12$vEtoEDHE3CnGAhEpuweCZesUr9SCgaO6rp/Ju6OAjHuAEh951q1OO',
  roles: '["student"]',
  skills: null,
  statement: null,
  t_title: 'นาย',
  t_name: 'Student',
  t_middle_name: null,
  t_surname: '002',
  e_title: 'Mr.',
  e_name: 'Student',
  e_middle_name: null,
  e_surname: '002',
  facultyId: null,
  departmentId: null,
  curriculumId: null,
  majorId: null,
  studentYear: null,
  phone: null,
  campus: null,
  gpa: null,
  nationality: null,
  passportId: null,
  visaType: null,
  profileImage: null,
  notifyEmail: true,
  notifyPush: false,
  notifySms: false,
  notifyAppUpdates: true,
  notifyDeadlines: true,
  notifyNews: false,
  language: 'th',
  theme: 'light',
  dateFormat: 'thai',
  createdAt: 2025-10-03T12:43:52.633Z,
  updatedAt: 2025-10-08T05:48:26.362Z,
  faculty: null,
  department: null,
  curriculum: null,
  major: null
}
API Settings - Full settings data: {
  thaiTitle: 'นาย',
  thaiName: 'Student',
  thaiMiddleName: '',
  thaiSurname: '002',
  englishTitle: 'Mr.',
  englishName: 'Student',
  englishMiddleName: '',
  englishSurname: '002',
  email: 'u6800002@smart-solutions.com',
  phone: '',
  studentId: 'u6800002',
  faculty: '',
  department: '',
  program: '',
  major: '',
  campus: '',
  gpa: '',
  nationality: 'ไทย',
  passportId: '',
  visaType: 'none',
  skills: '',
  statement: '',
  notifications: {
    email: true,
    push: false,
    sms: false,
    applicationUpdates: true,
    deadlineReminders: true,
    systemNews: false
  },
  preferences: { language: 'th', theme: 'light', dateFormat: 'thai' }
}
Settings API - Returning settings for user: u6800002
Settings API - Thai Name: Student 002
Settings API - English Name: Student 002
Settings API - Full user data: {
  "id": "u6800002",
  "name": "Student 002",
  "email": "u6800002@smart-solutions.com",
  "roles": [
    "student"
  ]
}
Settings API - Full settings data: {
  "thaiTitle": "นาย",
  "thaiName": "Student",
  "thaiMiddleName": "",
  "thaiSurname": "002",
  "englishTitle": "Mr.",
  "englishName": "Student",
  "englishMiddleName": "",
  "englishSurname": "002",
  "email": "u6800002@smart-solutions.com",
  "phone": "",
  "studentId": "u6800002",
  "faculty": "",
  "department": "",
  "program": "",
  "major": "",
  "campus": "",
  "gpa": "",
  "nationality": "ไทย",
  "passportId": "",
  "visaType": "none",
  "skills": "",
  "statement": "",
  "notifications": {
    "email": true,
    "push": false,
    "sms": false,
    "applicationUpdates": true,
    "deadlineReminders": true,
    "systemNews": false
  },
  "preferences": {
    "language": "th",
    "theme": "light",
    "dateFormat": "thai"
  }
}
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."password", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."facultyId", "public"."users"."departmentId", "public"."users"."curriculumId", "public"."users"."majorId", "public"."users"."studentYear", "public"."users"."phone", "public"."users"."campus", "public"."users"."gpa", "public"."users"."nationality", "public"."users"."passportId", "public"."users"."visaType", "public"."users"."profileImage", "public"."users"."notifyEmail", "public"."users"."notifyPush", "public"."users"."notifySms", "public"."users"."notifyAppUpdates", "public"."users"."notifyDeadlines", "public"."users"."notifyNews", "public"."users"."language", "public"."users"."theme", "public"."users"."dateFormat", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/user/settings 200 in 470ms
👤 User u6800002 joined their room
 GET /api/user/profile 200 in 459ms
Academic API - Fetching faculties with relations
Academic API - Found faculties: 1
 GET /api/academic/faculties?lang=th 200 in 387ms
 GET /api/user/profile 200 in 263ms
Settings API - User ID: u6800002
Settings API - Querying database for user: u6800002
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."password", "public"."users"."roles", "public"."users"."skills", "public"."users"."statement", "public"."users"."t_title", "public"."users"."t_name", "public"."users"."t_middle_name", "public"."users"."t_surname", "public"."users"."e_title", "public"."users"."e_name", "public"."users"."e_middle_name", "public"."users"."e_surname", "public"."users"."facultyId", "public"."users"."departmentId", "public"."users"."curriculumId", "public"."users"."majorId", "public"."users"."studentYear", "public"."users"."phone", "public"."users"."campus", "public"."users"."gpa", "public"."users"."nationality", "public"."users"."passportId", "public"."users"."visaType", "public"."users"."profileImage", "public"."users"."notifyEmail", "public"."users"."notifyPush", "public"."users"."notifySms", "public"."users"."notifyAppUpdates", "public"."users"."notifyDeadlines", "public"."users"."notifyNews", "public"."users"."language", "public"."users"."theme", "public"."users"."dateFormat", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
Settings API - Database query result: User found
API Settings - Full user data: {
  id: 'u6800002',
  name: 'Student 002',
  email: 'u6800002@smart-solutions.com',
  password: '$2a$12$vEtoEDHE3CnGAhEpuweCZesUr9SCgaO6rp/Ju6OAjHuAEh951q1OO',
  roles: '["student"]',
  skills: null,
  statement: null,
  t_title: 'นาย',
  t_name: 'Student',
  t_middle_name: null,
  t_surname: '002',
  e_title: 'Mr.',
  e_name: 'Student',
  e_middle_name: null,
  e_surname: '002',
  facultyId: null,
  departmentId: null,
  curriculumId: null,
  majorId: null,
  studentYear: null,
  phone: null,
  campus: null,
  gpa: null,
  nationality: null,
  passportId: null,
  visaType: null,
  profileImage: null,
  notifyEmail: true,
  notifyPush: false,
  notifySms: false,
  notifyAppUpdates: true,
  notifyDeadlines: true,
  notifyNews: false,
  language: 'th',
  theme: 'light',
  dateFormat: 'thai',
  createdAt: 2025-10-03T12:43:52.633Z,
  updatedAt: 2025-10-08T05:48:26.362Z,
  faculty: null,
  department: null,
  curriculum: null,
  major: null
}
API Settings - Full settings data: {
  thaiTitle: 'นาย',
  thaiName: 'Student',
  thaiMiddleName: '',
  thaiSurname: '002',
  englishTitle: 'Mr.',
  englishName: 'Student',
  englishMiddleName: '',
  englishSurname: '002',
  email: 'u6800002@smart-solutions.com',
  phone: '',
  studentId: 'u6800002',
  faculty: '',
  department: '',
  program: '',
  major: '',
  campus: '',
  gpa: '',
  nationality: 'ไทย',
  passportId: '',
  visaType: 'none',
  skills: '',
  statement: '',
  notifications: {
    email: true,
    push: false,
    sms: false,
    applicationUpdates: true,
    deadlineReminders: true,
    systemNews: false
  },
  preferences: { language: 'th', theme: 'light', dateFormat: 'thai' }
}
Settings API - Returning settings for user: u6800002
Settings API - Thai Name: Student 002
Settings API - English Name: Student 002
Settings API - Full user data: {
  "id": "u6800002",
  "name": "Student 002",
  "email": "u6800002@smart-solutions.com",
  "roles": [
    "student"
  ]
}
Settings API - Full settings data: {
  "thaiTitle": "นาย",
  "thaiName": "Student",
  "thaiMiddleName": "",
  "thaiSurname": "002",
  "englishTitle": "Mr.",
  "englishName": "Student",
  "englishMiddleName": "",
  "englishSurname": "002",
  "email": "u6800002@smart-solutions.com",
  "phone": "",
  "studentId": "u6800002",
  "faculty": "",
  "department": "",
  "program": "",
  "major": "",
  "campus": "",
  "gpa": "",
  "nationality": "ไทย",
  "passportId": "",
  "visaType": "none",
  "skills": "",
  "statement": "",
  "notifications": {
    "email": true,
    "push": false,
    "sms": false,
    "applicationUpdates": true,
    "deadlineReminders": true,
    "systemNews": false
  },
  "preferences": {
    "language": "th",
    "theme": "light",
    "dateFormat": "thai"
  }
}
 GET /api/user/settings 200 in 447ms
 GET /api/user/profile 200 in 127ms
 ○ Compiling /_not-found ...
 ✓ Compiled /_not-found in 6s (3225 modules)
 ○ Compiling /login ...
 GET /placeholder-avatar.jpg 404 in 6986ms
 ✓ Compiled /login in 5.4s (926 modules)
 GET /login 200 in 9042ms
 GET /login 200 in 193ms
 ⨯ Error: Cannot find module './4447.js'
Require stack:
- /Users/macbookpro/Documents/internship-system/.next/server/webpack-runtime.js
- /Users/macbookpro/Documents/internship-system/.next/server/app/login/page.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/require.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/load-components.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/utils.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/options.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/index.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/next-config-ts/transpile-config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/next.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/lib/start-server.js
    at __webpack_require__.f.require (.next/server/webpack-runtime.js:208:28)
    at <unknown> (.next/server/webpack-runtime.js:116:40)
    at Array.reduce (<anonymous>)
    at __webpack_require__.e (.next/server/webpack-runtime.js:115:67)
    at Array.map (<anonymous>)
    at __webpack_require__.X (.next/server/webpack-runtime.js:167:22)
    at <unknown> (.next/server/app/(dashboard)/student/settings/page.js:1:32922)
    at Object.<anonymous> (.next/server/app/(dashboard)/student/settings/page.js:1:33019) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [Array],
  page: '/student/settings'
}
 ⨯ Error: Cannot find module './8548.js'
Require stack:
- /Users/macbookpro/Documents/internship-system/.next/server/webpack-runtime.js
- /Users/macbookpro/Documents/internship-system/.next/server/app/login/page.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/require.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/load-components.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/utils.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/options.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/index.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/next-config-ts/transpile-config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/next.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/lib/start-server.js
    at __webpack_require__.f.require (.next/server/webpack-runtime.js:208:28)
    at <unknown> (.next/server/webpack-runtime.js:116:40)
    at Array.reduce (<anonymous>)
    at __webpack_require__.e (.next/server/webpack-runtime.js:115:67)
    at Array.map (<anonymous>)
    at __webpack_require__.X (.next/server/webpack-runtime.js:167:22)
    at <unknown> (.next/server/pages/_document.js:1:392)
    at Object.<anonymous> (.next/server/pages/_document.js:1:435) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [Array]
}
 GET /student/settings 500 in 347ms
👋 Client disconnected: kfdkJP71ux02Ppg2AAEa
 ⨯ Error: Cannot find module './4447.js'
Require stack:
- /Users/macbookpro/Documents/internship-system/.next/server/webpack-runtime.js
- /Users/macbookpro/Documents/internship-system/.next/server/app/login/page.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/require.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/load-components.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/utils.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/options.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/index.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/next-config-ts/transpile-config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/next.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/lib/start-server.js
    at __webpack_require__.f.require (.next/server/webpack-runtime.js:208:28)
    at <unknown> (.next/server/webpack-runtime.js:116:40)
    at Array.reduce (<anonymous>)
    at __webpack_require__.e (.next/server/webpack-runtime.js:115:67)
    at Array.map (<anonymous>)
    at __webpack_require__.X (.next/server/webpack-runtime.js:167:22)
    at <unknown> (.next/server/app/_not-found/page.js:1:2612)
    at Object.<anonymous> (.next/server/app/_not-found/page.js:1:2670) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [Array]
}
 ⨯ Error: Cannot find module './4447.js'
Require stack:
- /Users/macbookpro/Documents/internship-system/.next/server/webpack-runtime.js
- /Users/macbookpro/Documents/internship-system/.next/server/app/login/page.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/require.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/load-components.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/utils.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/options.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/index.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/next-config-ts/transpile-config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/next.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/lib/start-server.js
    at __webpack_require__.f.require (.next/server/webpack-runtime.js:208:28)
    at <unknown> (.next/server/webpack-runtime.js:116:40)
    at Array.reduce (<anonymous>)
    at __webpack_require__.e (.next/server/webpack-runtime.js:115:67)
    at Array.map (<anonymous>)
    at __webpack_require__.X (.next/server/webpack-runtime.js:167:22)
    at <unknown> (.next/server/app/_not-found/page.js:1:2612)
    at Object.<anonymous> (.next/server/app/_not-found/page.js:1:2670) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [Array]
}
 ⨯ Error: Cannot find module './4447.js'
Require stack:
- /Users/macbookpro/Documents/internship-system/.next/server/webpack-runtime.js
- /Users/macbookpro/Documents/internship-system/.next/server/app/login/page.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/require.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/load-components.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/utils.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/options.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/index.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/next-config-ts/transpile-config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/next.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/lib/start-server.js
    at __webpack_require__.f.require (.next/server/webpack-runtime.js:208:28)
    at <unknown> (.next/server/webpack-runtime.js:116:40)
    at Array.reduce (<anonymous>)
    at __webpack_require__.e (.next/server/webpack-runtime.js:115:67)
    at Array.map (<anonymous>)
    at __webpack_require__.X (.next/server/webpack-runtime.js:167:22)
    at <unknown> (.next/server/app/_not-found/page.js:1:2612)
    at Object.<anonymous> (.next/server/app/_not-found/page.js:1:2670) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [Array]
}
 ⨯ Error: Cannot find module './4447.js'
Require stack:
- /Users/macbookpro/Documents/internship-system/.next/server/webpack-runtime.js
- /Users/macbookpro/Documents/internship-system/.next/server/app/login/page.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/require.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/load-components.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/utils.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/options.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/index.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/next-config-ts/transpile-config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/next.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/lib/start-server.js
    at __webpack_require__.f.require (.next/server/webpack-runtime.js:208:28)
    at <unknown> (.next/server/webpack-runtime.js:116:40)
    at Array.reduce (<anonymous>)
    at __webpack_require__.e (.next/server/webpack-runtime.js:115:67)
    at Array.map (<anonymous>)
    at __webpack_require__.X (.next/server/webpack-runtime.js:167:22)
    at <unknown> (.next/server/app/_not-found/page.js:1:2612)
    at Object.<anonymous> (.next/server/app/_not-found/page.js:1:2670) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [Array]
}
 ⨯ Error: Cannot find module './4447.js'
Require stack:
- /Users/macbookpro/Documents/internship-system/.next/server/webpack-runtime.js
- /Users/macbookpro/Documents/internship-system/.next/server/app/login/page.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/require.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/load-components.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/utils.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/options.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/swc/index.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/build/next-config-ts/transpile-config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/config.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/next.js
- /Users/macbookpro/Documents/internship-system/node_modules/next/dist/server/lib/start-server.js
    at __webpack_require__.f.require (.next/server/webpack-runtime.js:208:28)
    at <unknown> (.next/server/webpack-runtime.js:116:40)
    at Array.reduce (<anonymous>)
    at __webpack_require__.e (.next/server/webpack-runtime.js:115:67)
    at Array.map (<anonymous>)
    at __webpack_require__.X (.next/server/webpack-runtime.js:167:22)
    at <unknown> (.next/server/app/_not-found/page.js:1:2612)
    at Object.<anonymous> (.next/server/app/_not-found/page.js:1:2670) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [Array]
}
 GET /_next/static/chunks/fallback/webpack.js 500 in 205ms
 GET /_next/static/chunks/fallback/react-refresh.js 500 in 203ms
 GET /_next/static/chunks/fallback/main.js 500 in 201ms
 GET /_next/static/chunks/fallback/pages/_app.js 500 in 197ms
 GET /_next/static/chunks/fallback/pages/_error.js 500 in 193ms
 ✓ Compiled in 4.4s (2312 modules)
 ✓ Compiled in 2.6s (2312 modules)
 ⨯ Module not found: Error: Can't resolve 'next-flight-client-entry-loader' in '/Users/macbookpro/Documents/internship-system'
 ○ Compiling / ...
 ✓ Compiled / in 24.6s (880 modules)
 ○ Compiling /_error ...
 ✓ Compiled /_error in 14.7s (3192 modules)
 GET / 500 in 39976ms
 ○ Compiling /_not-found ...
 ✓ Compiled /_not-found in 18.6s (3196 modules)
 GET /_next/static/chunks/fallback/main.js 404 in 20657ms
 GET /_next/static/chunks/fallback/webpack.js 404 in 20668ms
 GET /_next/static/chunks/fallback/react-refresh.js 404 in 20628ms
 GET /_next/static/chunks/fallback/pages/_app.js 404 in 340ms
 GET /_next/static/chunks/fallback/pages/_error.js 404 in 338ms
 ✓ Compiled in 4.3s (2312 modules)
 GET / 200 in 531ms
 ○ Compiling /_not-found ...
 ✓ Compiled /_not-found in 5.9s (3196 modules)
 GET /_next/static/chunks/app/error.js 404 in 7364ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 7377ms
 GET /_next/static/chunks/main-app.js?v=1759943319081 404 in 7397ms
 GET /_next/static/css/app/layout.css?v=1759943319081 404 in 7528ms
 GET /_next/static/chunks/app/page.js 404 in 7264ms
 ✓ Compiled in 1458ms (2315 modules)
 ✓ Compiled in 909ms (2315 modules)
 ✓ Compiled in 1253ms (2315 modules)
 ✓ Compiled in 1835ms (2342 modules)
 ✓ Compiled in 2.2s (2339 modules)
 ✓ Compiled in 12.1s (2338 modules)
 ✓ Compiled in 4.8s (2345 modules)
 ✓ Compiled in 2.4s (2345 modules)
 ✓ Compiled in 5.1s (2345 modules)
 ✓ Compiled in 12.8s (2345 modules)
 ✓ Compiled in 3.3s (2345 modules)
 ✓ Compiled in 8s (2331 modules)
 ✓ Compiled in 1162ms (2345 modules)
 ✓ Compiled in 25.2s (2345 modules)
 ✓ Compiled in 15.4s (2345 modules)
 ✓ Compiled in 6.4s (2345 modules)
 ✓ Compiled in 5.4s (2345 modules)
 ✓ Compiled in 25s (2345 modules)
 ✓ Compiled in 134.1s (3274 modules)
 ✓ Compiled in 29.5s (3274 modules)
 ✓ Compiled in 40.4s (3260 modules)
 ✓ Compiled in 4s (3260 modules)
 ✓ Compiled in 5.3s (3260 modules)
 ✓ Compiled in 4s (3260 modules)
 ✓ Compiled in 15.8s (3260 modules)
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/10.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/10.pack.gz'
 ✓ Compiled in 9.4s (3260 modules)
 ✓ Compiled in 9.4s (3260 modules)
 ✓ Compiled in 15.5s (3260 modules)
 ✓ Compiled in 29.4s (3274 modules)
 ✓ Compiled in 35.6s (3274 modules)
 ✓ Compiled in 43.6s (3274 modules)
 ✓ Compiled in 24.7s (3274 modules)
 ✓ Compiled in 5.3s (3274 modules)
 ✓ Compiled in 5.5s (3274 modules)
 ✓ Compiled in 7.2s (3274 modules)
 ✓ Compiled in 7.4s (3274 modules)
 ✓ Compiled in 5.5s (3274 modules)
 ✓ Compiled in 7.1s (3274 modules)
 ✓ Compiled in 6.5s (3274 modules)
 ✓ Compiled in 15.7s (3274 modules)
 ✓ Compiled in 9.1s (3274 modules)
 ✓ Compiled in 5.8s (3274 modules)
 ✓ Compiled in 7.1s (3274 modules)
 ✓ Compiled in 6.2s (3274 modules)
 ✓ Compiled in 10.2s (3274 modules)
 ✓ Compiled in 7s (3274 modules)
 ✓ Compiled in 19.5s (3274 modules)
 ✓ Compiled in 26.3s (3274 modules)
 ✓ Compiled in 29.6s (2369 modules)
 ✓ Compiled in 16.2s (2369 modules)
 ✓ Compiled in 19.6s (2369 modules)
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/7.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/7.pack.gz'
 ✓ Compiled in 38.4s (3274 modules)
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz'
 ✓ Compiled in 9.1s (3260 modules)
 ✓ Compiled in 5.4s (3260 modules)
 ✓ Compiled in 2.8s (3260 modules)
 ✓ Compiled in 6.3s (3260 modules)
 ✓ Compiled in 3.6s (3260 modules)
 ✓ Compiled in 8.7s (3260 modules)
 ✓ Compiled in 11.4s (2369 modules)
 ✓ Compiled in 8.5s (2369 modules)
 ✓ Compiled in 4.9s (2369 modules)
 ✓ Compiled in 65.4s (3274 modules)
 ✓ Compiled in 14.3s (3274 modules)
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/client-development/0.pack.gz'
 ✓ Compiled in 83.7s (3260 modules)
 ✓ Compiled in 35.7s (3274 modules)
 ✓ Compiled in 30.5s (3264 modules)
 ✓ Compiled in 4s (2357 modules)
 ✓ Compiled in 4.2s (2357 modules)
 ✓ Compiled in 6s (2357 modules)
 ✓ Compiled in 19s (3278 modules)
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/server-development/25.pack.gz_' -> '/Users/macbookpro/Documents/internship-system/.next/cache/webpack/server-development/25.pack.gz'
 ✓ Compiled in 22.3s (3264 modules)
 ✓ Compiled in 6.9s (3278 modules)
 ✓ Compiled in 10.2s (3278 modules)
 ✓ Compiled in 5.6s (3278 modules)
 ✓ Compiled in 3.9s (3278 modules)
 ✓ Compiled in 3.8s (3278 modules)
 ✓ Compiled in 9.8s (2371 modules)
 ✓ Compiled in 8.9s (2371 modules)
 ✓ Compiled in 8.1s (2371 modules)
 ✓ Compiled in 12.6s (3278 modules)
 ✓ Compiled in 2.5s (3279 modules)
 ✓ Compiled in 12.3s (3265 modules)
 ✓ Compiled in 11.9s (3279 modules)
[?25h
