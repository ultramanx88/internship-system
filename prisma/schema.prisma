// Local Development Schema (SQLite)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  roles         String
  skills        String?
  statement     String?
  t_title       String?
  t_name        String?
  t_middle_name String?
  t_surname     String?
  e_title       String?
  e_name        String?
  e_middle_name String?
  e_surname     String?
  facultyId     String?
  departmentId  String?
  curriculumId  String?
  majorId       String?
  studentYear   Int?
  // เพิ่ม fields สำหรับ settings
  phone         String?
  campus        String?
  gpa           String?
  nationality   String?
  passportId    String?
  visaType      String?
  profileImage  String?
  // การตั้งค่าการแจ้งเตือน
  notifyEmail   Boolean       @default(true)
  notifyPush    Boolean       @default(false)
  notifySms     Boolean       @default(false)
  notifyAppUpdates Boolean    @default(true)
  notifyDeadlines Boolean     @default(true)
  notifyNews    Boolean       @default(false)
  // การตั้งค่าทั่วไป
  language      String        @default("th")
  theme         String        @default("light")
  dateFormat    String        @default("thai")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  applications  Application[]
  documents     Document[]
  printRecords  PrintRecord[]
  curriculum    Curriculum?   @relation(fields: [curriculumId], references: [id])
  department    Department?   @relation(fields: [departmentId], references: [id])
  faculty       Faculty?      @relation(fields: [facultyId], references: [id])
  major         Major?        @relation(fields: [majorId], references: [id])
  courseInstructorApplications Application[] @relation("CourseInstructorApplications")
  supervisorApplications Application[] @relation("SupervisorApplications")
  committeeMembers CommitteeMember[]
  assignedCommittees ApplicationCommittee[]

  @@map("users")
}

model Internship {
  id           String         @id @default(cuid())
  title        String
  companyId    String
  location     String
  description  String
  type         InternshipType
  applications Application[]
  company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("internships")
}

model Application {
  id            String            @id @default(cuid())
  studentId     String
  internshipId  String
  courseInstructorId String?      // เพิ่มการเชื่อมโยงกับอาจารย์ประจำวิชา
  supervisorId  String?           // เพิ่มการเชื่อมโยงกับอาจารย์นิเทศ
  status        ApplicationStatus
  dateApplied   DateTime
  feedback      String?
  projectTopic  String?
  printRecordId String?
  internship    Internship        @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  printRecord   PrintRecord?      @relation(fields: [printRecordId], references: [id])
  student       User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseInstructor User?          @relation("CourseInstructorApplications", fields: [courseInstructorId], references: [id])
  supervisor    User?             @relation("SupervisorApplications", fields: [supervisorId], references: [id])
  committees    ApplicationCommittee[] // เพิ่มการเชื่อมโยงกับกรรมการ

  @@map("applications")
}

model Document {
  id         String         @id @default(cuid())
  studentId  String
  name       String
  type       DocumentType
  status     DocumentStatus @default(pending)
  size       Int
  url        String
  uploadDate DateTime       @default(now())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  student    User           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model PrintRecord {
  id             String        @id @default(cuid())
  documentNumber String        @unique
  documentDate   DateTime
  printedAt      DateTime      @default(now())
  printedById    String
  applications   Application[]
  printedBy      User          @relation(fields: [printedById], references: [id])

  @@map("print_records")
}

model Committee {
  id          String       @id @default(cuid())
  name        String
  nameEn      String?
  description String?
  isActive    Boolean      @default(true)
  academicYear String      // ปีการศึกษา เช่น "2567"
  semester    String       // ภาคเรียน เช่น "1", "2", "3"
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     CommitteeMember[]
  applications ApplicationCommittee[]

  @@map("committees")
}

model CommitteeMember {
  id         String    @id @default(cuid())
  committeeId String
  userId     String
  role       String    @default("member") // member, chair, secretary
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  committee  Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([committeeId, userId])
  @@map("committee_members")
}

model ApplicationCommittee {
  id           String      @id @default(cuid())
  applicationId String
  committeeId  String
  assignedBy   String      // user ID ของคนที่มอบหมาย
  assignedAt   DateTime    @default(now())
  isActive     Boolean     @default(true)
  application  Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  committee    Committee   @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  assignedByUser User      @relation(fields: [assignedBy], references: [id])

  @@unique([applicationId, committeeId])
  @@map("application_committees")
}

model Faculty {
  id          String       @id @default(cuid())
  nameTh      String
  nameEn      String?
  code        String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  users       User[]

  @@map("faculties")
}

model Department {
  id          String       @id @default(cuid())
  nameTh      String
  nameEn      String?
  code        String?
  facultyId   String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  curriculums Curriculum[]
  faculty     Faculty      @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  users       User[]

  @@map("departments")
}

model Curriculum {
  id           String     @id @default(cuid())
  nameTh       String
  nameEn       String?
  code         String?
  degree       String?
  departmentId String
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  majors       Major[]
  users        User[]

  @@map("curriculums")
}

model Major {
  id           String     @id @default(cuid())
  nameTh       String
  nameEn       String?
  curriculumId String
  area         String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  users        User[]

  @@map("majors")
}

model Company {
  id          String       @id @default(cuid())
  name        String
  nameEn      String?
  address     String?
  province    String?
  district    String?
  subdistrict String?
  postalCode  String?
  phone       String?
  email       String?
  website     String?
  description String?
  industry    String?
  size        CompanySize?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  internships Internship[]

  @@map("companies")
}

enum Role {
  admin
  staff
  courseInstructor
  committee
  visitor
  student
}

enum ApplicationStatus {
  pending
  approved
  rejected
}

enum InternshipType {
  internship
  co_op
}

enum CompanySize {
  startup
  small
  medium
  large
  enterprise
}

enum DocumentType {
  cv
  transcript
  certificate
  request_letter
  introduction_letter
  application_form
  evaluation_form
  other
}

enum DocumentStatus {
  pending
  approved
  rejected
}