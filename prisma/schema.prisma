generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                        @id @default(cuid())
  name                         String
  email                        String                        @unique
  password                     String
  roles                        String
  skills                       String?
  statement                    String?
  t_title                      String?
  t_name                       String?
  t_middle_name                String?
  t_surname                    String?
  e_title                      String?
  e_name                       String?
  e_middle_name                String?
  e_surname                    String?
  facultyId                    String?
  departmentId                 String?
  curriculumId                 String?
  majorId                      String?
  studentYear                  Int?
  phone                        String?
  campus                       String?
  gpa                          String?
  nationality                  String?
  passportId                   String?
  visaType                     String?
  profileImage                 String?
  internshipPhoto1             String?
  internshipPhoto2             String?
  notifyEmail                  Boolean                       @default(true)
  notifyPush                   Boolean                       @default(false)
  notifySms                    Boolean                       @default(false)
  notifyAppUpdates             Boolean                       @default(true)
  notifyDeadlines              Boolean                       @default(true)
  notifyNews                   Boolean                       @default(false)
  language                     String                        @default("th")
  theme                        String                        @default("light")
  dateFormat                   String                        @default("thai")
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  courseInstructorApplications Application[]                 @relation("CourseInstructorApplications")
  applications                 Application[]
  supervisorApplications       Application[]                 @relation("SupervisorApplications")
  auditLogs                    AuditLog[]
  backupRecords                BackupRecord[]
  committeeMembers             CommitteeMember[]
  courseInstructors            CourseInstructor[]
  dataProcessingConsents       DataProcessingConsent[]
  documents                    Document[]
  educatorRoleAssignments      EducatorRoleAssignment[]
  evaluations                  Evaluation[]
  facultyInstructorAssignments FacultyInstructorAssignment[]
  printRecords                 PrintRecord[]
  systemLogs                   SystemLog[]
  generatedDocuments          InternshipDocument[]
  supervisorAppointments       SupervisorAppointment[]
  notifications               Notification[]
  curriculum                   Curriculum?                   @relation(fields: [curriculumId], references: [id])
  department                   Department?                   @relation(fields: [departmentId], references: [id])
  faculty                      Faculty?                      @relation(fields: [facultyId], references: [id])
  major                        Major?                        @relation(fields: [majorId], references: [id])

  @@map("users")
}

/// Honorific titles/prefixes (คำนำหน้า)
model Title {
  id           String   @id @default(cuid())
  nameTh       String
  nameEn       String?
  applicableTo String[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("titles")
}

// Removed external-facing Internship model for internal-only flow

model Application {
  id                      String                 @id @default(cuid())
  studentId               String
  status                  ApplicationStatus
  dateApplied             DateTime               @default(now())
  feedback                String?
  projectTopic            String?
  projectTopicEn          String?
  printRecordId           String?
  projectProposal         String?
  preferredStartDate      DateTime?
  availableDuration       Int?
  staffReviewed           Boolean                @default(false)
  staffReviewedAt         DateTime?
  documentReceived        Boolean                @default(false)
  documentReceivedAt      DateTime?
  documentReviewed        Boolean                @default(false)
  documentReviewedAt      DateTime?
  documentApproved        Boolean                @default(false)
  documentApprovedAt      DateTime?
  documentsPrepared       Boolean                @default(false)
  documentsPreparedAt     DateTime?
  staffWorkflowNotes      String?
  courseInstructorId      String?
  instructorReceived      Boolean                @default(false)
  instructorReceivedAt    DateTime?
  instructorReviewed      Boolean                @default(false)
  instructorReviewedAt    DateTime?
  instructorWorkflowNotes String?
  supervisorId            String?
  supervisorAssigned      Boolean                @default(false)
  supervisorAssignedAt    DateTime?
  supervisorReceived      Boolean                @default(false)
  supervisorReceivedAt    DateTime?
  supervisorConfirmed     Boolean                @default(false)
  supervisorConfirmedAt   DateTime?
  appointmentScheduled    Boolean                @default(false)
  appointmentScheduledAt  DateTime?
  supervisorWorkflowNotes String?
  committeeReceived       Boolean                @default(false)
  committeeReceivedAt     DateTime?
  committeeReviewed       Boolean                @default(false)
  committeeReviewedAt     DateTime?
  committeeApproved       Boolean                @default(false)
  committeeApprovedAt     DateTime?
  committeeWorkflowNotes  String?
  studentWorkflowStep     Int                    @default(1)
  staffFeedback           String?
  courseInstructorApprovedAt    DateTime?
  courseInstructorRejectedAt    DateTime?
  courseInstructorRejectionNote String?
  supervisorAppointmentDate     DateTime?
  supervisorAppointmentLocation String?
  supervisorAppointmentNotes    String?
  // Embedded company details from student (internal-only)
  companyRegNumber        String?
  companyName             String?
  companyPhone            String?
  businessType            String?
  addressNumber           String?
  building                String?
  floor                   String?
  soi                     String?
  road                    String?
  provinceId              String?
  districtId              String?
  subdistrictId           String?
  postalCode              String?
  mapUrl                  String?
  latitude                Float?
  longitude               Float?
  coordinatorName         String?
  coordinatorTel          String?
  coordinatorEmail        String?
  department              String?
  position                String?
  jobDescription          String?
  supervisorName          String?
  supervisorTel           String?
  supervisorEmail         String?
  studentReason           String?
  externalResponseStatus  ExternalResponseStatus @default(pending)
  externalResponseAt      DateTime?
  externalResponseNote    String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  committees              ApplicationCommittee[]
  courseInstructor        User?                  @relation("CourseInstructorApplications", fields: [courseInstructorId], references: [id])
  printRecord             PrintRecord?           @relation(fields: [printRecordId], references: [id])
  student                 User                   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  supervisor              User?                  @relation("SupervisorApplications", fields: [supervisorId], references: [id])
  evaluations             Evaluation[]
  internshipDocuments     InternshipDocument[]
  weeklyReports           WeeklyReport[]
  supervisorAppointments  SupervisorAppointment[]

  @@index([status])
  @@index([studentId])
  @@index([createdAt])
  @@map("applications")
}

model SystemMedia {
  id           String   @id @default(cuid())
  type         String
  name         String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  width        Int?
  height       Int?
  isActive     Boolean  @default(true)
  uploadedBy   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("system_media")
}

model Document {
  id         String         @id @default(cuid())
  studentId  String
  name       String
  nameEn     String?
  type       DocumentType
  status     DocumentStatus @default(pending)
  size       Int
  url        String
  uploadDate DateTime       @default(now())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  student    User           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model PrintRecord {
  id             String        @id @default(cuid())
  documentNumber String        @unique
  documentDate   DateTime
  printedAt      DateTime      @default(now())
  printedById    String
  applications   Application[]
  printedBy      User          @relation(fields: [printedById], references: [id])

  @@map("print_records")
}

model Faculty {
  id                           String                        @id @default(cuid())
  nameTh                       String
  nameEn                       String?
  code                         String?
  isActive                     Boolean                       @default(true)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  courses                      Course[]
  departments                  Department[]
  facultyInstructorAssignments FacultyInstructorAssignment[]
  users                        User[]

  @@map("faculties")
}

model Department {
  id          String       @id @default(cuid())
  nameTh      String
  nameEn      String?
  code        String?
  facultyId   String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courses     Course[]
  curriculums Curriculum[]
  faculty     Faculty      @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  users       User[]

  @@map("departments")
}

model Curriculum {
  id           String     @id @default(cuid())
  nameTh       String
  nameEn       String?
  code         String?
  degree       String?
  departmentId String
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  courses      Course[]
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  majors       Major[]
  users        User[]

  @@map("curriculums")
}

model Major {
  id           String     @id @default(cuid())
  nameTh       String
  nameEn       String?
  curriculumId String
  area         String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  courses      Course[]
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  users        User[]

  @@map("majors")
}

// Removed external-facing Company model for internal-only flow

model Province {
  id        String     @id @default(cuid())
  nameTh    String
  nameEn    String?
  code      String?    @unique
  isActive  Boolean    @default(true)
  districts District[]

  @@map("provinces")
}

model District {
  id           String        @id @default(cuid())
  nameTh       String
  nameEn       String?
  code         String?       @unique
  isActive     Boolean       @default(true)
  provinceId   String
  province     Province      @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  subdistricts Subdistrict[]

  @@map("districts")
}

model Subdistrict {
  id         String    @id @default(cuid())
  nameTh     String
  nameEn     String?
  code       String?   @unique
  postalCode String?
  isActive   Boolean   @default(true)
  districtId String
  district   District  @relation(fields: [districtId], references: [id], onDelete: Cascade)

  @@map("subdistricts")
}

model AcademicYear {
  id                           String                        @id @default(cuid())
  year                         Int                           @unique
  name                         String
  nameEn                       String?
  isActive                     Boolean                       @default(false)
  startDate                    DateTime?
  endDate                      DateTime?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  roleAssignments              EducatorRoleAssignment[]
  facultyInstructorAssignments FacultyInstructorAssignment[]
  semesters                    Semester[]

  @@map("academic_years")
}

model Semester {
  id                           String                        @id @default(cuid())
  name                         String
  nameEn                       String?
  academicYearId               String
  startDate                    DateTime?
  endDate                      DateTime?
  isActive                     Boolean                       @default(false)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  roleAssignments              EducatorRoleAssignment[]
  facultyInstructorAssignments FacultyInstructorAssignment[]
  academicYear                 AcademicYear                  @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  @@unique([name, academicYearId])
  @@map("semesters")
}

model EducatorRoleAssignment {
  id             String        @id @default(cuid())
  educatorId     String
  academicYearId String
  semesterId     String
  educatorRoleId String?
  roles          String
  isActive       Boolean       @default(true)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  educator       User          @relation(fields: [educatorId], references: [id], onDelete: Cascade)
  educatorRole   EducatorRole? @relation(fields: [educatorRoleId], references: [id], onDelete: Cascade)
  semester       Semester      @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  @@unique([educatorId, academicYearId, semesterId])
  @@map("educator_role_assignments")
}

model FacultyInstructorAssignment {
  id             String       @id @default(cuid())
  facultyId      String
  academicYearId String
  semesterId     String
  instructorId   String
  isActive       Boolean      @default(true)
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  faculty        Faculty      @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  instructor     User         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  semester       Semester     @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  @@unique([facultyId, academicYearId, semesterId])
  @@map("faculty_instructor_assignments")
}

model SystemLog {
  id         String   @id @default(cuid())
  level      LogLevel
  message    String
  context    Json?
  userId     String?
  sessionId  String?
  ipAddress  String?
  userAgent  String?
  endpoint   String?
  method     String?
  statusCode Int?
  duration   Int?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("system_logs")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String?
  oldValues  Json?
  newValues  Json?
  userId     String?
  sessionId  String?
  ipAddress  String?
  userAgent  String?
  reason     String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model LogRetentionPolicy {
  id            String    @id @default(cuid())
  logType       String    @unique
  retentionDays Int       @default(90)
  isActive      Boolean   @default(true)
  lastCleanup   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("log_retention_policies")
}

model DataProcessingConsent {
  id             String    @id @default(cuid())
  userId         String
  consentType    String
  isConsented    Boolean
  consentDate    DateTime  @default(now())
  withdrawalDate DateTime?
  consentVersion String    @default("1.0")
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_processing_consents")
}

model DataAnonymizationRule {
  id                String   @id @default(cuid())
  tableName         String
  columnName        String
  anonymizationType String
  maskPattern       String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([tableName, columnName])
  @@map("data_anonymization_rules")
}

model BackupRecord {
  id            String       @id @default(cuid())
  filename      String
  filePath      String
  fileSize      BigInt
  backupType    BackupType
  status        BackupStatus @default(IN_PROGRESS)
  errorMessage  String?
  metadata      Json?
  createdBy     String?
  createdAt     DateTime     @default(now())
  completedAt   DateTime?
  createdByUser User?        @relation(fields: [createdBy], references: [id])

  @@map("backup_records")
}

model Committee {
  id           String                 @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean                @default(true)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  applications ApplicationCommittee[]
  members      CommitteeMember[]

  @@map("committees")
}

model CommitteeMember {
  id          String    @id @default(cuid())
  committeeId String
  userId      String
  role        String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([committeeId, userId])
  @@map("committee_members")
}

model ApplicationCommittee {
  id            String      @id @default(cuid())
  applicationId String
  committeeId   String
  status        String
  notes         String?
  reviewedAt    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  committee     Committee   @relation(fields: [committeeId], references: [id], onDelete: Cascade)

  @@unique([applicationId, committeeId])
  @@map("application_committees")
}

model Course {
  id            String             @id @default(cuid())
  code          String             @unique
  name          String
  nameEn        String?
  description   String?
  descriptionEn String?
  credits       Int
  categoryId    String?
  facultyId     String?
  departmentId  String?
  curriculumId  String?
  majorId       String?
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  instructors   CourseInstructor[]
  category      CourseCategory?    @relation(fields: [categoryId], references: [id])
  curriculum    Curriculum?        @relation(fields: [curriculumId], references: [id])
  department    Department?        @relation(fields: [departmentId], references: [id])
  faculty       Faculty?           @relation(fields: [facultyId], references: [id])
  major         Major?             @relation(fields: [majorId], references: [id])

  @@map("courses")
}

model CourseCategory {
  id          String   @id @default(cuid())
  name        String
  nameEn      String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@map("course_categories")
}

model CourseInstructor {
  id        String   @id @default(cuid())
  courseId  String
  userId    String
  role      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@map("course_instructors")
}

model EvaluationForm {
  id            String       @id @default(cuid())
  name          String
  nameEn        String?
  description   String?
  descriptionEn String?
  type          String
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  evaluations   Evaluation[]

  @@map("evaluation_forms")
}

model Evaluation {
  id            String         @id @default(cuid())
  formId        String
  applicationId String
  evaluatorId   String
  evaluatorType String
  score         Int
  comments      String?
  submittedAt   DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  evaluator     User           @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)
  form          EvaluationForm @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("evaluations")
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  nameEn    String?
  type      String
  template  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("document_templates")
}

model EducatorRole {
  id            String                   @id @default(cuid())
  name          String
  nameEn        String?
  description   String?
  descriptionEn String?
  permissions   Json?
  isActive      Boolean                  @default(true)
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  assignments   EducatorRoleAssignment[]

  @@map("educator_roles")
}

model Holiday {
  id        String   @id @default(cuid())
  name      String
  nameEn    String?
  date      DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, date], name: "name_date")
  @@map("holidays")
}

model DocumentSequence {
  id         Int      @id @default(1)
  nextNumber BigInt   @default(1)
  updatedAt  DateTime @updatedAt

  @@map("document_sequences")
}

model DocumentArchive {
  id         String   @id @default(cuid())
  documentNo BigInt   @unique
  deletedAt  DateTime @default(now())
  reason     String?
  metaHash   String?

  @@map("document_archive")
}

// Removed CompanyResponse model; replaced by fields in Application

model InternshipDocument {
  id            String                @id @default(cuid())
  applicationId String
  type          InternshipDocumentType
  title         String
  titleEn       String?
  content       String?
  fileUrl       String?
  generatedAt   DateTime              @default(now())
  generatedBy   String?
  status        DocumentStatus        @default(pending)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  application   Application           @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  generatedByUser User?               @relation(fields: [generatedBy], references: [id])

  @@map("internship_documents")
}

model WeeklyReport {
  id            String   @id @default(cuid())
  applicationId String
  weekNumber    Int
  reportDate    DateTime
  content       String
  attachments   String[] // Array of file URLs
  submittedAt   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([applicationId, weekNumber])
  @@map("weekly_reports")
}

model SupervisorAppointment {
  id            String   @id @default(cuid())
  applicationId String
  supervisorId  String
  appointmentDate DateTime
  location      String?
  notes         String?
  status        AppointmentStatus @default(scheduled)
  completedAt   DateTime?
  reportContent String?
  attachments   String[] // Array of file URLs
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  supervisor    User       @relation(fields: [supervisorId], references: [id], onDelete: Cascade)

  @@map("supervisor_appointments")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  readAt      DateTime?
  actionUrl   String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  admin
  staff
  courseInstructor
  committee
  visitor
  student
}

enum ApplicationStatus {
  submitted
  course_instructor_pending
  course_instructor_approved
  course_instructor_rejected
  committee_pending
  committee_partially_approved
  committee_approved
  documents_prepared
  awaiting_external_response
  company_accepted
  company_rejected
  internship_started
  internship_ongoing
  internship_completed
}

// Removed InternshipType enum

// Removed CompanySize enum

enum DocumentType {
  cv
  transcript
  certificate
  request_letter
  introduction_letter
  application_form
  evaluation_form
  project_proposal
  internship_report
  company_evaluation
  supervisor_evaluation
  other
}

enum DocumentStatus {
  pending
  approved
  rejected
  draft
  submitted
  under_review
}

enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}

enum BackupType {
  FULL
  INCREMENTAL
  SCHEMA_ONLY
  DATA_ONLY
}

enum BackupStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  EXPIRED
}

// Replaced CompanyResponseStatus with ExternalResponseStatus
enum ExternalResponseStatus {
  pending
  accepted
  rejected
}

enum InternshipDocumentType {
  student_introduction_letter
  company_acceptance_letter
  internship_certificate
  final_report
  evaluation_form
}

enum AppointmentStatus {
  scheduled
  completed
  cancelled
  rescheduled
}

enum NotificationType {
  application_status_change
  document_ready
  appointment_scheduled
  report_due
  evaluation_due
  system_announcement
}
