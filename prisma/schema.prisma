// Local Development Schema (SQLite)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  roles         String
  skills        String?
  statement     String?
  t_title       String?
  t_name        String?
  t_middle_name String?
  t_surname     String?
  e_title       String?
  e_name        String?
  e_middle_name String?
  e_surname     String?
  facultyId     String?
  departmentId  String?
  curriculumId  String?
  majorId       String?
  studentYear   Int?
  // เพิ่ม fields สำหรับ settings
  phone         String?
  campus        String?
  gpa           String?
  nationality   String?
  passportId    String?
  visaType      String?
  profileImage  String?
  // การตั้งค่าการแจ้งเตือน
  notifyEmail   Boolean       @default(true)
  notifyPush    Boolean       @default(false)
  notifySms     Boolean       @default(false)
  notifyAppUpdates Boolean    @default(true)
  notifyDeadlines Boolean     @default(true)
  notifyNews    Boolean       @default(false)
  // การตั้งค่าทั่วไป
  language      String        @default("th")
  theme         String        @default("light")
  dateFormat    String        @default("thai")
  // Educator role
  educatorRoleId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  applications  Application[]
  documents     Document[]
  printRecords  PrintRecord[]
  curriculum    Curriculum?   @relation(fields: [curriculumId], references: [id])
  department    Department?   @relation(fields: [departmentId], references: [id])
  faculty       Faculty?      @relation(fields: [facultyId], references: [id])
  major         Major?        @relation(fields: [majorId], references: [id])
  // Educator relations
  educatorRole EducatorRole? @relation(fields: [educatorRoleId], references: [id])
  courseInstructors CourseInstructor[]
  supervisedStudents SupervisedStudent[]
  createdCourseInstructors CourseInstructor[] @relation("CourseInstructorCreatedBy")
  // Evaluation relations
  evaluations Evaluation[]

  @@map("users")
}

model Internship {
  id           String         @id @default(cuid())
  title        String
  companyId    String
  location     String
  description  String
  type         InternshipType
  applications Application[]
  company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  evaluations  Evaluation[]

  @@map("internships")
}

model Application {
  id            String            @id @default(cuid())
  studentId     String
  internshipId  String
  status        ApplicationStatus
  dateApplied   DateTime
  feedback      String?
  projectTopic  String?
  printRecordId String?
  internship    Internship        @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  printRecord   PrintRecord?      @relation(fields: [printRecordId], references: [id])
  student       User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  // Educator relations
  supervisedStudents SupervisedStudent[]

  @@map("applications")
}

model Document {
  id         String         @id @default(cuid())
  studentId  String
  name       String
  type       DocumentType
  status     DocumentStatus @default(pending)
  size       Int
  url        String
  uploadDate DateTime       @default(now())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  student    User           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model PrintRecord {
  id             String        @id @default(cuid())
  documentNumber String        @unique
  documentDate   DateTime
  printedAt      DateTime      @default(now())
  printedById    String
  applications   Application[]
  printedBy      User          @relation(fields: [printedById], references: [id])

  @@map("print_records")
}

model Faculty {
  id          String       @id @default(cuid())
  nameTh      String
  nameEn      String?
  code        String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  users       User[]

  @@map("faculties")
}

model Department {
  id          String       @id @default(cuid())
  nameTh      String
  nameEn      String?
  code        String?
  facultyId   String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  curriculums Curriculum[]
  faculty     Faculty      @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  users       User[]

  @@map("departments")
}

model Curriculum {
  id           String     @id @default(cuid())
  nameTh       String
  nameEn       String?
  code         String?
  degree       String?
  departmentId String
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  majors       Major[]
  users        User[]

  @@map("curriculums")
}

model Major {
  id           String     @id @default(cuid())
  nameTh       String
  nameEn       String?
  curriculumId String
  area         String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  users        User[]

  @@map("majors")
}

model Company {
  id          String       @id @default(cuid())
  name        String
  nameEn      String?
  address     String?
  province    String?
  district    String?
  subdistrict String?
  postalCode  String?
  phone       String?
  email       String?
  website     String?
  description String?
  industry    String?
  size        CompanySize?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  internships Internship[]
  
  // Address relations
  provinceId    String?
  districtId    String?
  subdistrictId String?
  provinceRef   Province?     @relation(fields: [provinceId], references: [id])
  districtRef   District?     @relation(fields: [districtId], references: [id])
  subdistrictRef Subdistrict? @relation(fields: [subdistrictId], references: [id])
  // Evaluation relations
  evaluations Evaluation[]

  @@map("companies")
}

enum Role {
  admin
  staff
  courseInstructor
  committee
  visitor
  student
}

enum ApplicationStatus {
  pending
  approved
  rejected
}

enum InternshipType {
  internship
  co_op
}

enum CompanySize {
  startup
  small
  medium
  large
  enterprise
}

enum DocumentType {
  cv
  transcript
  certificate
  request_letter
  introduction_letter
  application_form
  evaluation_form
  other
}

enum DocumentStatus {
  pending
  approved
  rejected
}

// Educator System Models
model EducatorRole {
  id          String   @id @default(cuid())
  name        String   @unique
  nameEn      String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users User[]
  courseInstructors CourseInstructor[]
  
  @@map("educator_roles")
}

model AcademicYear {
  id        String    @id @default(cuid())
  year      String    @unique
  isActive  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  semesters Semester[]
  courseInstructors CourseInstructor[]
  
  @@map("academic_years")
}

model Semester {
  id            String      @id @default(cuid())
  name          String
  academicYearId String
  semester      String
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  courseInstructors CourseInstructor[]
  
  @@unique([academicYearId, semester])
  @@map("semesters")
}

model CourseInstructor {
  id            String        @id @default(cuid())
  academicYearId String
  semesterId    String
  courseId      String?
  instructorId  String
  roleId        String
  isActive      Boolean       @default(true)
  createdBy     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  academicYear  AcademicYear  @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  semester      Semester      @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  instructor    User          @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  role          EducatorRole  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdByUser User          @relation("CourseInstructorCreatedBy", fields: [createdBy], references: [id])
  supervisedStudents SupervisedStudent[]
  
  @@unique([academicYearId, semesterId, courseId, instructorId, roleId])
  @@map("course_instructors")
}

model SupervisedStudent {
  id                String          @id @default(cuid())
  courseInstructorId String
  studentId         String
  applicationId     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  courseInstructor  CourseInstructor @relation(fields: [courseInstructorId], references: [id], onDelete: Cascade)
  student          User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  application      Application?     @relation(fields: [applicationId], references: [id])
  
  @@map("supervised_students")
}

// Address System Models
model Province {
  id        String   @id @default(cuid())
  nameTh    String
  nameEn    String?
  code      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  districts District[]
  companies Company[]
  
  @@map("provinces")
}

model District {
  id         String   @id @default(cuid())
  nameTh     String
  nameEn     String?
  code       String
  provinceId String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  province     Province     @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  subdistricts Subdistrict[]
  companies    Company[]
  
  @@unique([provinceId, code])
  @@map("districts")
}

model Subdistrict {
  id         String   @id @default(cuid())
  nameTh     String
  nameEn     String?
  code       String
  districtId String
  postalCode String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  district  District  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  companies Company[]
  
  @@unique([districtId, code])
  @@map("subdistricts")
}

// Evaluation System Models
model EvaluationForm {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  questions   EvaluationQuestion[]
  evaluations Evaluation[]
  
  @@map("evaluation_forms")
}

model EvaluationQuestion {
  id              String      @id @default(cuid())
  evaluationFormId String
  question        String
  questionType    QuestionType
  order           Int
  isRequired      Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  evaluationForm EvaluationForm @relation(fields: [evaluationFormId], references: [id], onDelete: Cascade)
  answers        EvaluationAnswer[]
  
  @@map("evaluation_questions")
}

model Evaluation {
  id              String            @id @default(cuid())
  studentId       String
  companyId       String
  internshipId    String?
  evaluationFormId String
  status          EvaluationStatus  @default(pending)
  submittedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  student       User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  company       Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  internship    Internship?        @relation(fields: [internshipId], references: [id])
  evaluationForm EvaluationForm    @relation(fields: [evaluationFormId], references: [id])
  answers       EvaluationAnswer[]
  
  @@map("evaluations")
}

model EvaluationAnswer {
  id              String            @id @default(cuid())
  evaluationId    String
  questionId      String
  answerText      String?
  answerRating    Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  evaluation Evaluation      @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  question   EvaluationQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@map("evaluation_answers")
}

enum QuestionType {
  rating
  text
  multiple_choice
  yes_no
}

enum EvaluationStatus {
  pending
  submitted
  completed
}