import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testApplicationFlow() {
  try {
    console.log('üß™ Testing Application Flow...');

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const company = await prisma.company.upsert({
      where: { id: 'test_company_001' },
      update: {},
      create: {
        id: 'test_company_001',
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        address: '123 ‡∏ñ‡∏ô‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡πÅ‡∏Ç‡∏ß‡∏á‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
        phone: '02-123-4567',
        email: 'hr@techcompany.com',
        website: 'https://techcompany.com',
        description: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥',
        isActive: true
      }
    });

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const internship = await prisma.internship.upsert({
      where: { id: 'test_internship_001' },
      update: {},
      create: {
        id: 'test_internship_001',
        title: '‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå',
        companyId: company.id,
        location: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
        description: '‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ',
        type: 'internship'
      }
    });

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const student = await prisma.user.upsert({
      where: { id: 'test_student_001' },
      update: {},
      create: {
        id: 'test_student_001',
        email: 'test.student.flow@university.ac.th',
        name: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÉ‡∏à‡∏î‡∏µ',
        password: '$2b$10$example', // hashed password
        roles: '["student"]',
        phone: '081-234-5678'
      }
    });

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const instructor = await prisma.user.upsert({
      where: { id: 'test_instructor_001' },
      update: {},
      create: {
        id: 'test_instructor_001',
        email: 'test.instructor.flow@university.ac.th',
        name: '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÉ‡∏à‡∏î‡∏µ',
        password: '$2b$10$example', // hashed password
        roles: '["courseInstructor"]'
      }
    });

    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const application = await prisma.application.create({
      data: {
        studentId: student.id,
        internshipId: internship.id,
        courseInstructorId: instructor.id, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏¥‡∏ä‡∏≤
        status: 'pending',
        dateApplied: new Date(),
        feedback: null,
        projectTopic: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
      },
      include: {
        student: true,
        internship: {
          include: {
            company: true
          }
        },
        courseInstructor: true
      }
    });

    console.log('‚úÖ Test data created successfully:');
    console.log('üìù Application ID:', application.id);
    console.log('üë®‚Äçüéì Student:', application.student.name);
    console.log('üè¢ Company:', application.internship.company.name);
    console.log('üë®‚Äçüè´ Course Instructor:', application.courseInstructor?.name);
    console.log('üìä Status:', application.status);

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏¥‡∏ä‡∏≤
    const instructorApplications = await prisma.application.findMany({
      where: {
        courseInstructorId: instructor.id
      },
      include: {
        student: true,
        internship: {
          include: {
            company: true
          }
        }
      }
    });

    console.log('\nüìã Applications assigned to instructor:');
    console.log('üë®‚Äçüè´ Instructor:', instructor.name);
    console.log('üìä Total applications:', instructorApplications.length);
    instructorApplications.forEach((app, index) => {
      console.log(`  ${index + 1}. ${app.student.name} - ${app.internship.company.name} (${app.status})`);
    });

  } catch (error) {
    console.error('‚ùå Error testing application flow:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testApplicationFlow();
