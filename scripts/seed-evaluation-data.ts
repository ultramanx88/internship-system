import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function seedEvaluationData() {
  try {
    console.log('Starting evaluation data seeding...');

    // Create evaluation form
    console.log('üìù Creating evaluation form...');
    const evaluationForm = await prisma.evaluationForm.upsert({
      where: { id: 'eval-form-company' },
      update: {
        title: '‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£',
        description: '‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏´‡∏Å‡∏¥‡∏à‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
        isActive: true,
      },
      create: {
        id: 'eval-form-company',
        title: '‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£',
        description: '‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏´‡∏Å‡∏¥‡∏à‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
        isActive: true,
      },
    });
    console.log(`‚úÖ Created evaluation form: ${evaluationForm.title}`);

    // Create evaluation questions
    console.log('‚ùì Creating evaluation questions...');
    const questions = [
      {
        id: 'q1',
        question: '‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏µ‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á (Supervisor/Mentor Support)',
        questionType: 'rating',
        isRequired: true,
        order: 1,
      },
      {
        id: 'q2',
        question: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ (Task Appropriateness)',
        questionType: 'rating',
        isRequired: true,
        order: 2,
      },
      {
        id: 'q3',
        question: '‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ (Work Environment & Culture)',
        questionType: 'rating',
        isRequired: true,
        order: 3,
      },
      {
        id: 'q4',
        question: '‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤ (Learning & Development Opportunities)',
        questionType: 'rating',
        isRequired: true,
        order: 4,
      },
      {
        id: 'q5',
        question: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (Overall Satisfaction)',
        questionType: 'rating',
        isRequired: true,
        order: 5,
      },
      {
        id: 'q6',
        question: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (Transportation Convenience)',
        questionType: 'rating',
        isRequired: true,
        order: 6,
      },
      {
        id: 'q7',
        question: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Working Hours)',
        questionType: 'rating',
        isRequired: true,
        order: 7,
      },
      {
        id: 'q8',
        question: '‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à (Communication & Understanding)',
        questionType: 'rating',
        isRequired: true,
        order: 8,
      },
    ];

    for (const question of questions) {
      await prisma.evaluationQuestion.upsert({
        where: { id: question.id },
        update: {
          question: question.question,
          questionType: question.questionType as any,
          isRequired: question.isRequired,
          order: question.order,
        },
        create: {
          id: question.id,
          evaluationFormId: evaluationForm.id,
          question: question.question,
          questionType: question.questionType as any,
          isRequired: question.isRequired,
          order: question.order,
        },
      });
    }
    console.log(`‚úÖ Created ${questions.length} evaluation questions`);

    console.log('\nüéâ Evaluation data seeding completed successfully!');
    console.log(`\nüìä Summary:\n  - Evaluation Forms: 1\n  - Questions: ${questions.length}`);

  } catch (error) {
    console.error('Error seeding evaluation data:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

seedEvaluationData();
