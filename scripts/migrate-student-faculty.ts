import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function migrateStudentFaculty() {
  try {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏ì‡∏∞‡πÉ‡∏´‡∏°‡πà...\n');

    // ‡∏´‡∏≤‡∏Ñ‡∏ì‡∏∞‡πÉ‡∏´‡∏°‡πà (‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå)
    const newFaculty = await prisma.faculty.findFirst({
      where: {
        nameTh: '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'
      },
      include: {
        departments: {
          include: {
            curriculums: {
              include: {
                majors: true
              }
            }
          }
        }
      }
    });

    if (!newFaculty) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå');
      return;
    }

    console.log(`‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡πÉ‡∏´‡∏°‡πà: ${newFaculty.nameTh}`);
    console.log(`   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤: ${newFaculty.departments.length}`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ
    newFaculty.departments.forEach(dept => {
      console.log(`   - ${dept.nameTh}: ${dept.curriculums.length} ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£`);
    });

    // ‡∏´‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢
    const accountingDept = newFaculty.departments.find(d => d.nameTh === '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ');
    const managementDept = newFaculty.departments.find(d => d.nameTh === '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£');
    const liberalArtsDept = newFaculty.departments.find(d => d.nameTh === '‡∏™‡∏≤‡∏Ç‡∏≤‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå');

    if (!accountingDept || !managementDept || !liberalArtsDept) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£');
      return;
    }

    // ‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    const accountingCurriculum = accountingDept.curriculums[0]; // ‡∏ö‡∏ä.‡∏ö.‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    const businessAdminCurriculum = managementDept.curriculums.find(c => c.nameTh.includes('‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à'));
    const businessAdminMajor = businessAdminCurriculum?.majors[0]; // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à

    console.log('\nüìã ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ:');
    console.log(`- ${accountingCurriculum.nameTh} (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å)`);
    console.log(`- ${businessAdminCurriculum?.nameTh} -> ${businessAdminMajor?.nameTh}`);

    // ‡∏¢‡πâ‡∏≤‡∏¢‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏Å‡πà‡∏≤
    const oldFaculties = await prisma.faculty.findMany({
      where: {
        nameTh: {
          in: ['‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', '‡∏Ñ‡∏ì‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à']
        }
      }
    });

    console.log(`\nüóëÔ∏è  ‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö: ${oldFaculties.map(f => f.nameTh).join(', ')}`);

    // ‡∏¢‡πâ‡∏≤‡∏¢‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏ì‡∏∞‡πÉ‡∏´‡∏°‡πà
    const students = await prisma.user.findMany({
      where: {
        roles: {
          contains: 'student'
        }
      }
    });

    console.log(`\nüë• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ${students.length} ‡∏Ñ‡∏ô...`);

    let successCount = 0;
    let errorCount = 0;

    for (const student of students) {
      try {
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
        let targetDept, targetCurriculum, targetMajor;

        // ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
        const studentIndex = students.indexOf(student);
        
        if (studentIndex % 3 === 0) {
          // 1/3 ‡πÑ‡∏õ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
          targetDept = accountingDept;
          targetCurriculum = accountingCurriculum;
          targetMajor = null; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å
        } else if (studentIndex % 3 === 1) {
          // 1/3 ‡πÑ‡∏õ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à)
          targetDept = managementDept;
          targetCurriculum = businessAdminCurriculum;
          targetMajor = businessAdminMajor;
        } else {
          // 1/3 ‡πÑ‡∏õ‡∏™‡∏≤‡∏Ç‡∏≤‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
          targetDept = liberalArtsDept;
          targetCurriculum = liberalArtsDept.curriculums[0]; // ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏£‡∏Å
          targetMajor = null; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        await prisma.user.update({
          where: { id: student.id },
          data: {
            majorId: targetMajor?.id || null,
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            t_name: student.t_name || student.name.split(' ')[0],
            t_surname: student.t_surname || student.name.split(' ').slice(1).join(' '),
          }
        });

        console.log(`‚úÖ ${student.name} -> ${targetDept.nameTh} -> ${targetCurriculum?.nameTh}${targetMajor ? ` -> ${targetMajor.nameTh}` : ''}`);
        successCount++;

      } catch (error) {
        console.log(`‚ùå ${student.name}: ${error.message}`);
        errorCount++;
      }
    }

    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢:`);
    console.log(`- ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏Ñ‡∏ô`);
    console.log(`- ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} ‡∏Ñ‡∏ô`);

    // ‡∏•‡∏ö‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    console.log(`\nüóëÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏Å‡πà‡∏≤...`);
    
    for (const oldFaculty of oldFaculties) {
      try {
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
        await prisma.major.deleteMany({
          where: {
            curriculum: {
              department: {
                facultyId: oldFaculty.id
              }
            }
          }
        });

        await prisma.curriculum.deleteMany({
          where: {
            department: {
              facultyId: oldFaculty.id
            }
          }
        });

        await prisma.department.deleteMany({
          where: {
            facultyId: oldFaculty.id
          }
        });

        await prisma.faculty.delete({
          where: { id: oldFaculty.id }
        });

        console.log(`‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏ì‡∏∞ ${oldFaculty.nameTh} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
      } catch (error) {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏ì‡∏∞ ${oldFaculty.nameTh}: ${error.message}`);
      }
    }

    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

migrateStudentFaculty();
