import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkApplicationsData() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• applications...\n');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô applications
    const totalApplications = await prisma.application.count();
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô applications ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalApplications}`);

    if (totalApplications === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• applications ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      console.log('üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...');
      
      // ‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const students = await prisma.user.findMany({
        where: {
          roles: {
            contains: 'student'
          }
        },
        take: 5
      });

      const companies = await prisma.company.findMany({
        take: 3
      });

      const internships = await prisma.internship.findMany({
        take: 3
      });

      console.log(`üë• ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${students.length} ‡∏Ñ‡∏ô`);
      console.log(`üè¢ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: ${companies.length} ‡πÅ‡∏´‡πà‡∏á`);
      console.log(`üíº ‡∏á‡∏≤‡∏ô‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô: ${internships.length} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á`);

      if (students.length === 0 || internships.length === 0) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏á‡∏≤‡∏ô‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á applications');
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á applications ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
      const sampleApplications = [];
      for (let i = 0; i < Math.min(10, students.length); i++) {
        const student = students[i];
        const internship = internships[i % internships.length];
        
        sampleApplications.push({
          studentId: student.id,
          internshipId: internship.id,
          studentReason: `‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô ${i + 1}`,
          expectedSkills: ['JavaScript', 'React', 'Node.js'],
          preferredStartDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
          availableDuration: 3,
          projectProposal: `‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô ${i + 1}: ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`,
          status: ['pending', 'approved', 'rejected'][i % 3],
          dateApplied: new Date(Date.now() - i * 24 * 60 * 60 * 1000), // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏•‡∏î‡∏•‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ß‡∏±‡∏ô
        });
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await prisma.application.createMany({
        data: sampleApplications
      });

      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á applications ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ${sampleApplications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• applications
    const applications = await prisma.application.findMany({
      include: {
        student: {
          select: {
            id: true,
            name: true,
            email: true,
            major: {
              select: {
                nameTh: true,
                nameEn: true
              }
            }
          }
        },
        internship: {
          include: {
            company: {
              select: {
                id: true,
                name: true,
                nameEn: true
              }
            }
          }
        }
      },
      orderBy: {
        dateApplied: 'desc'
      },
      take: 10
    });

    console.log('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• applications ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
    applications.forEach((app, index) => {
      console.log(`${index + 1}. ${app.student.name} (${app.student.email})`);
      console.log(`   - ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: ${app.internship.company.name}`);
      console.log(`   - ‡∏™‡∏≤‡∏Ç‡∏≤: ${app.student.major?.nameTh || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${app.status}`);
      console.log(`   - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${app.dateApplied.toLocaleDateString('th-TH')}`);
      console.log(`   - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${app.availableDuration} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkApplicationsData();
