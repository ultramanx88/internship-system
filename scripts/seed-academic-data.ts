import { prisma } from '../src/lib/prisma';

async function seedAcademicData() {
  try {
    console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô...');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    const academicYears = [
      {
        year: 2023,
        name: '‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 2566',
        startDate: new Date('2023-06-01'),
        endDate: new Date('2024-05-31'),
        isActive: false
      },
      {
        year: 2024,
        name: '‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 2567',
        startDate: new Date('2024-06-01'),
        endDate: new Date('2025-05-31'),
        isActive: true
      },
      {
        year: 2025,
        name: '‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 2568',
        startDate: new Date('2025-06-01'),
        endDate: new Date('2026-05-31'),
        isActive: false
      }
    ];

    console.log('üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤...');
    for (const yearData of academicYears) {
      const existingYear = await prisma.academicYear.findUnique({
        where: { year: yearData.year }
      });

      if (!existingYear) {
        const academicYear = await prisma.academicYear.create({
          data: yearData
        });
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${academicYear.name}`);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ô‡∏µ‡πâ
        const semesters = [
          {
            name: '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà 1',
            academicYearId: academicYear.id,
            startDate: new Date(yearData.startDate.getFullYear(), 5, 1), // ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô
            endDate: new Date(yearData.startDate.getFullYear(), 9, 30), // ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°
            isActive: yearData.isActive
          },
          {
            name: '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà 2',
            academicYearId: academicYear.id,
            startDate: new Date(yearData.startDate.getFullYear(), 10, 1), // ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô
            endDate: new Date(yearData.startDate.getFullYear() + 1, 2, 31), // ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°
            isActive: false
          },
          {
            name: '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô',
            academicYearId: academicYear.id,
            startDate: new Date(yearData.startDate.getFullYear() + 1, 3, 1), // ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô
            endDate: new Date(yearData.startDate.getFullYear() + 1, 4, 31), // ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°
            isActive: false
          }
        ];

        console.log(`üìö ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${academicYear.name}...`);
        for (const semesterData of semesters) {
          const semester = await prisma.semester.create({
            data: semesterData
          });
          console.log(`  ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${semester.name}`);
        }
      } else {
        console.log(`‚ö†Ô∏è  ‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ${yearData.name} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Educator Role Assignments
    console.log('üë®‚Äçüè´ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó Educator...');
    
    // ‡∏´‡∏≤ educator users
    const educators = await prisma.user.findMany({
      where: {
        OR: [
          { roles: { contains: 'courseInstructor' } },
          { roles: { contains: 'supervisor' } },
          { roles: { contains: 'committee' } },
          { roles: { contains: 'visitor' } }
        ]
      },
      take: 5
    });

    if (educators.length > 0) {
      // ‡∏´‡∏≤‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const currentAcademicYear = await prisma.academicYear.findFirst({
        where: { isActive: true },
        include: { semesters: true }
      });

      if (currentAcademicYear) {
        const semester1 = currentAcademicYear.semesters.find(s => s.name === '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà 1');
        
        if (semester1) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á role assignments ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
          const roleAssignments = [
            {
              educatorId: educators[0].id,
              academicYearId: currentAcademicYear.id,
              semesterId: semester1.id,
              roles: ['courseInstructor', 'supervisor'],
              isActive: true,
              notes: '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®'
            },
            {
              educatorId: educators[1]?.id,
              academicYearId: currentAcademicYear.id,
              semesterId: semester1.id,
              roles: ['committee'],
              isActive: true,
              notes: '‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£'
            },
            {
              educatorId: educators[2]?.id,
              academicYearId: currentAcademicYear.id,
              semesterId: semester1.id,
              roles: ['visitor'],
              isActive: true,
              notes: '‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£'
            }
          ];

          for (const assignmentData of roleAssignments) {
            if (assignmentData.educatorId) {
              const existingAssignment = await prisma.educatorRoleAssignment.findFirst({
                where: {
                  educatorId: assignmentData.educatorId,
                  academicYearId: assignmentData.academicYearId,
                  semesterId: assignmentData.semesterId
                }
              });

              if (!existingAssignment) {
                const assignment = await prisma.educatorRoleAssignment.create({
                  data: {
                    ...assignmentData,
                    roles: JSON.stringify(assignmentData.roles)
                  }
                });
                console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${assignmentData.roles.join(', ')}`);
              }
            }
          }
        }
      }
    }

    console.log('üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const totalYears = await prisma.academicYear.count();
    const totalSemesters = await prisma.semester.count();
    const totalAssignments = await prisma.educatorRoleAssignment.count();
    
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:');
    console.log(`- ‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${totalYears} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`- ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${totalSemesters} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`- ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${totalAssignments} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
seedAcademicData()
  .then(() => {
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    process.exit(1);
  });
