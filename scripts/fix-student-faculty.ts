import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixStudentFaculty() {
  try {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤...\n');

    // ‡∏´‡∏≤‡∏Ñ‡∏ì‡∏∞‡πÉ‡∏´‡∏°‡πà
    const faculty = await prisma.faculty.findFirst({
      where: {
        nameTh: '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'
      },
      include: {
        departments: {
          include: {
            curriculums: {
              include: {
                majors: true
              }
            }
          }
        }
      }
    });

    if (!faculty) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå');
      return;
    }

    // ‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å
    const accountingDept = faculty.departments.find(d => d.nameTh === '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ');
    const managementDept = faculty.departments.find(d => d.nameTh === '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£');
    const liberalArtsDept = faculty.departments.find(d => d.nameTh === '‡∏™‡∏≤‡∏Ç‡∏≤‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå');

    const accountingCurriculum = accountingDept?.curriculums[0]; // ‡∏ö‡∏ä.‡∏ö.‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    const businessAdminCurriculum = managementDept?.curriculums.find(c => c.nameTh.includes('‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à'));
    const businessAdminMajor = businessAdminCurriculum?.majors[0]; // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
    const liberalArtsCurriculum = liberalArtsDept?.curriculums[0]; // ‡∏®‡∏®.‡∏ö.‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏™‡∏≤‡∏Å‡∏•

    console.log('üìã ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ:');
    console.log(`- ${accountingCurriculum?.nameTh} (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å)`);
    console.log(`- ${businessAdminCurriculum?.nameTh} -> ${businessAdminMajor?.nameTh}`);
    console.log(`- ${liberalArtsCurriculum?.nameTh} (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å)`);

    // ‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ì‡∏∞
    const studentsWithoutFaculty = await prisma.user.findMany({
      where: {
        roles: {
          contains: 'student'
        },
        major: null
      }
    });

    console.log(`\nüë• ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ì‡∏∞: ${studentsWithoutFaculty.length} ‡∏Ñ‡∏ô`);

    let successCount = 0;
    let errorCount = 0;

    for (const student of studentsWithoutFaculty) {
      try {
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
        let targetDept, targetCurriculum, targetMajor;

        const studentIndex = studentsWithoutFaculty.indexOf(student);
        
        if (studentIndex % 3 === 0) {
          // 1/3 ‡πÑ‡∏õ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
          targetDept = accountingDept;
          targetCurriculum = accountingCurriculum;
          targetMajor = null; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å
        } else if (studentIndex % 3 === 1) {
          // 1/3 ‡πÑ‡∏õ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à)
          targetDept = managementDept;
          targetCurriculum = businessAdminCurriculum;
          targetMajor = businessAdminMajor;
        } else {
          // 1/3 ‡πÑ‡∏õ‡∏™‡∏≤‡∏Ç‡∏≤‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
          targetDept = liberalArtsDept;
          targetCurriculum = liberalArtsCurriculum;
          targetMajor = null; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å
        }

        if (!targetDept || !targetCurriculum) {
          console.log(`‚ö†Ô∏è  ${student.name}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°`);
          continue;
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        await prisma.user.update({
          where: { id: student.id },
          data: {
            majorId: targetMajor?.id || null,
          }
        });

        console.log(`‚úÖ ${student.name} -> ${targetDept.nameTh} -> ${targetCurriculum.nameTh}${targetMajor ? ` -> ${targetMajor.nameTh}` : ''}`);
        successCount++;

      } catch (error) {
        console.log(`‚ùå ${student.name}: ${error.message}`);
        errorCount++;
      }
    }

    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:`);
    console.log(`- ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏Ñ‡∏ô`);
    console.log(`- ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} ‡∏Ñ‡∏ô`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const finalCheck = await prisma.user.findMany({
      where: {
        roles: {
          contains: 'student'
        }
      },
      include: {
        major: {
          include: {
            curriculum: {
              include: {
                department: {
                  include: {
                    faculty: true
                  }
                }
              }
            }
          }
        }
      }
    });

    const studentsWithFaculty = finalCheck.filter(s => s.major?.curriculum?.department?.faculty);
    console.log(`\nüéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:`);
    console.log(`- ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${finalCheck.length} ‡∏Ñ‡∏ô`);
    console.log(`- ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ì‡∏∞: ${studentsWithFaculty.length} ‡∏Ñ‡∏ô`);
    console.log(`- ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ì‡∏∞: ${finalCheck.length - studentsWithFaculty.length} ‡∏Ñ‡∏ô`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixStudentFaculty();
