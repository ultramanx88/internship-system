# =============================================================================
# 🐳 Production Docker Compose Configuration
# =============================================================================
# For production deployment with proper security and scaling

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: internship_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-internship_system_prod}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internship_network_prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: internship_app_prod
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-internship_system_prod}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:8080}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backups:/app/backups
      - ./logs:/app/logs
      - ./uploads:/app/public/uploads
    networks:
      - internship_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: internship_redis_prod
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internship_network_prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: internship_nginx_prod
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - internship_network_prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # pgAdmin for database management (optional in production)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: internship_pgadmin_prod
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-8081}:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data_prod:/var/lib/pgadmin
    networks:
      - internship_network_prod
    profiles:
      - admin  # Only start with --profile admin

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: internship_backup_prod
    restart: "no"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-internship_system_prod}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    command: >
      sh -c "
        while true; do
          echo 'Starting backup...'
          pg_dump -h postgres -U ${POSTGRES_USER:-postgres} ${POSTGRES_DB:-internship_system_prod} > /backups/backup-$(date +%Y%m%d-%H%M%S).sql
          echo 'Backup completed'
          sleep 86400
        done
      "
    depends_on:
      - postgres
    networks:
      - internship_network_prod
    profiles:
      - backup  # Only start with --profile backup

volumes:
  postgres_data_prod:
  redis_data_prod:
  pgadmin_data_prod:

networks:
  internship_network_prod:
    driver: bridge
