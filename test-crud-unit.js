// Unit Test for CRUD Operations
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Test User Settings CRUD
async function testUserSettingsCRUD() {
  console.log('\nüß™ Testing User Settings CRUD...');
  
  try {
    // CREATE - ‡∏™‡∏£‡πâ‡∏≤‡∏á test user
    console.log('‚ûï Creating test user...');
    const testUser = await prisma.user.upsert({
      where: { id: 'test-crud-001' },
      update: {},
      create: {
        id: 'test-crud-001',
        name: 'Test User',
        email: 'test-crud@example.com',
        password: 'test123',
        roles: '["student"]'
      }
    });
    console.log('‚úÖ Test user created:', testUser.id);
    
    // READ - ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
    console.log('üìñ Reading user data...');
    const userData = await prisma.user.findUnique({
      where: { id: 'test-crud-001' },
      include: {
        faculty: true,
        department: true,
        curriculum: true,
        major: true
      }
    });
    console.log('‚úÖ User data read:', userData ? 'SUCCESS' : 'FAILED');
    
    // UPDATE - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('üìù Updating user settings...');
    const updatedUser = await prisma.user.update({
      where: { id: 'test-crud-001' },
      data: {
        t_title: '‡∏ô‡∏≤‡∏¢',
        t_name: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        t_surname: '‡∏£‡∏∞‡∏ö‡∏ö',
        phone: '081-234-5678',
        nationality: '‡πÑ‡∏ó‡∏¢',
        notifyEmail: true,
        notifyPush: false,
        language: 'th',
        theme: 'light'
      }
    });
    console.log('‚úÖ User settings updated:', updatedUser.t_name);
    
    // DELETE - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    console.log('üîÑ Resetting user settings...');
    const resetUser = await prisma.user.update({
      where: { id: 'test-crud-001' },
      data: {
        phone: null,
        nationality: '‡πÑ‡∏ó‡∏¢',
        notifyEmail: true,
        notifyPush: false,
        language: 'th',
        theme: 'light'
      }
    });
    console.log('‚úÖ User settings reset:', resetUser.phone === null ? 'SUCCESS' : 'FAILED');
    
  } catch (error) {
    console.error('‚ùå User Settings CRUD Error:', error.message);
  }
}

// Test Profile Image CRUD
async function testProfileImageCRUD() {
  console.log('\nüß™ Testing Profile Image CRUD...');
  
  try {
    // UPDATE - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    console.log('üìù Updating profile image...');
    const updatedProfile = await prisma.user.update({
      where: { id: 'test-crud-001' },
      data: {
        profileImage: 'https://example.com/test-profile.jpg'
      }
    });
    console.log('‚úÖ Profile image updated:', updatedProfile.profileImage ? 'SUCCESS' : 'FAILED');
    
    // READ - ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    console.log('üìñ Reading profile image...');
    const profileData = await prisma.user.findUnique({
      where: { id: 'test-crud-001' },
      select: {
        id: true,
        profileImage: true
      }
    });
    console.log('‚úÖ Profile image read:', profileData.profileImage ? 'SUCCESS' : 'FAILED');
    
    // DELETE - ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    console.log('üóëÔ∏è Deleting profile image...');
    const deletedProfile = await prisma.user.update({
      where: { id: 'test-crud-001' },
      data: {
        profileImage: null
      }
    });
    console.log('‚úÖ Profile image deleted:', deletedProfile.profileImage === null ? 'SUCCESS' : 'FAILED');
    
  } catch (error) {
    console.error('‚ùå Profile Image CRUD Error:', error.message);
  }
}

// Test Academic Data CRUD
async function testAcademicDataCRUD() {
  console.log('\nüß™ Testing Academic Data CRUD...');
  
  try {
    // CREATE - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ì‡∏∞‡πÉ‡∏´‡∏°‡πà
    console.log('‚ûï Creating test faculty...');
    const testFaculty = await prisma.faculty.create({
      data: {
        id: 'test-faculty-001',
        nameTh: '‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö CRUD',
        nameEn: 'Test CRUD Faculty',
        code: 'CRUD',
        isActive: true
      }
    });
    console.log('‚úÖ Test faculty created:', testFaculty.nameTh);
    
    // READ - ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞
    console.log('üìñ Reading faculties data...');
    const faculties = await prisma.faculty.findMany({
      where: { isActive: true },
      include: {
        departments: {
          include: {
            curriculums: {
              include: {
                majors: true
              }
            }
          }
        }
      }
    });
    console.log('‚úÖ Faculties read:', faculties.length, 'faculties found');
    
    // UPDATE - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞
    console.log('üìù Updating faculty...');
    const updatedFaculty = await prisma.faculty.update({
      where: { id: 'test-faculty-001' },
      data: {
        nameTh: '‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö CRUD (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)',
        nameEn: 'Test CRUD Faculty (Updated)',
        code: 'CRUD_UPD'
      }
    });
    console.log('‚úÖ Faculty updated:', updatedFaculty.nameTh);
    
    // SOFT DELETE - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ì‡∏∞
    console.log('üîÑ Soft deleting faculty...');
    const softDeletedFaculty = await prisma.faculty.update({
      where: { id: 'test-faculty-001' },
      data: {
        isActive: false
      }
    });
    console.log('‚úÖ Faculty soft deleted:', !softDeletedFaculty.isActive ? 'SUCCESS' : 'FAILED');
    
    // HARD DELETE - ‡∏•‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ñ‡∏≤‡∏ß‡∏£
    console.log('üí• Hard deleting faculty...');
    await prisma.faculty.delete({
      where: { id: 'test-faculty-001' }
    });
    console.log('‚úÖ Faculty hard deleted: SUCCESS');
    
  } catch (error) {
    console.error('‚ùå Academic Data CRUD Error:', error.message);
  }
}

// Test Data Validation
async function testDataValidation() {
  console.log('\nüß™ Testing Data Validation...');
  
  try {
    // Test duplicate email
    console.log('‚ö†Ô∏è Testing duplicate email validation...');
    try {
      await prisma.user.create({
        data: {
          id: 'test-duplicate',
          name: 'Duplicate User',
          email: 'test-crud@example.com', // Same email as test user
          password: 'test123',
          roles: '["student"]'
        }
      });
      console.log('‚ùå Duplicate email validation: FAILED (should have thrown error)');
    } catch (error) {
      if (error.code === 'P2002') {
        console.log('‚úÖ Duplicate email validation: SUCCESS (correctly rejected)');
      } else {
        console.log('‚ùå Unexpected error:', error.message);
      }
    }
    
    // Test required fields
    console.log('‚ö†Ô∏è Testing required fields validation...');
    try {
      await prisma.user.create({
        data: {
          id: 'test-required',
          // Missing required fields: name, email, password, roles
        }
      });
      console.log('‚ùå Required fields validation: FAILED (should have thrown error)');
    } catch (error) {
      console.log('‚úÖ Required fields validation: SUCCESS (correctly rejected)');
    }
    
  } catch (error) {
    console.error('‚ùå Data Validation Error:', error.message);
  }
}

// Test Relations
async function testRelations() {
  console.log('\nüß™ Testing Database Relations...');
  
  try {
    // Test faculty-department relation
    console.log('üîó Testing faculty-department relation...');
    const facultyWithDepts = await prisma.faculty.findFirst({
      include: {
        departments: true
      }
    });
    console.log('‚úÖ Faculty-Department relation:', facultyWithDepts ? 'SUCCESS' : 'NO DATA');
    
    // Test user-faculty relation
    console.log('üîó Testing user-faculty relation...');
    const userWithFaculty = await prisma.user.findFirst({
      where: {
        facultyId: { not: null }
      },
      include: {
        faculty: true
      }
    });
    console.log('‚úÖ User-Faculty relation:', userWithFaculty ? 'SUCCESS' : 'NO DATA');
    
  } catch (error) {
    console.error('‚ùå Relations Test Error:', error.message);
  }
}

// Cleanup test data
async function cleanup() {
  console.log('\nüßπ Cleaning up test data...');
  
  try {
    // Delete test user
    await prisma.user.deleteMany({
      where: {
        id: {
          startsWith: 'test-crud'
        }
      }
    });
    
    // Delete test faculties
    await prisma.faculty.deleteMany({
      where: {
        id: {
          startsWith: 'test-faculty'
        }
      }
    });
    
    console.log('‚úÖ Cleanup completed');
    
  } catch (error) {
    console.error('‚ùå Cleanup Error:', error.message);
  }
}

// Run all tests
async function runAllTests() {
  console.log('üöÄ Starting CRUD Unit Tests...');
  console.log('=' .repeat(50));
  
  await testUserSettingsCRUD();
  await testProfileImageCRUD();
  await testAcademicDataCRUD();
  await testDataValidation();
  await testRelations();
  await cleanup();
  
  console.log('\n' + '=' .repeat(50));
  console.log('‚ú® All unit tests completed!');
}

// Main execution
async function main() {
  try {
    await runAllTests();
  } catch (error) {
    console.error('‚ùå Test execution error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main().catch(console.error);